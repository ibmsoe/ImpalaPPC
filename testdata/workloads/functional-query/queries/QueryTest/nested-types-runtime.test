====
---- QUERY
-- Serializes collections over the network
select straight_join t1.id, m.key
from complextypestbl t1, complextypestbl t2, t2.int_map m
where t1.id = t2.id
---- RESULTS
1,'k1'
1,'k2'
2,'k1'
2,'k2'
7,'k1'
7,'k3'
8,'k1'
---- TYPES
bigint,string
====
====
---- QUERY
# Tests that unnested collection-typed slots are set to NULL. Relies on DCHECKs in the
# coordinator to assert that all collection-typed slots in the final output batches
# are set to NULL.
select id, item from complextypestbl t, t.int_array
---- RESULTS
1,1
1,2
1,3
2,1
2,2
2,3
2,NULL
2,NULL
2,NULL
8,-1
---- TYPES
bigint,int
====
---- QUERY
# Tests that unnested collection-typed slots are set to NULL with nested subplans.
select id, a.pos, m.key, m.value from complextypestbl t, t.int_map_array a, a.item m
---- RESULTS
1,0,'k1',1
2,0,'k1',1
2,0,'k3',NULL
8,1,'k1',1
---- TYPES
bigint,bigint,string,int
====
---- QUERY
# Tests that unnested collection-typed slots are set to NULL after an outer-join.
# This tests asserts proper handling of NULL tuples.
# The use of straight_join ensures that the subplan node is placed after the outer join.
select straight_join t1.id, a.item
from complextypestbl t1 left outer join complextypestbl t2 on (t1.id = t2.id + 10)
  inner join t2.int_array a
---- RESULTS
---- TYPES
bigint,int
====
---- QUERY
# Tests that unnested collection-typed slots are set to NULL even if the same
# nested collection is referenced multiple times.
select straight_join t1.id, t2.id, a1.item, a2.item
from complextypestbl t1 inner join t1.int_array a1
  left outer join [shuffle] complextypestbl t2 on t1.id = t2.id
  inner join t1.int_array a2
where t1.id = 1
---- RESULTS
1,1,1,1
1,1,1,2
1,1,1,3
1,1,2,1
1,1,2,2
1,1,2,3
1,1,3,1
1,1,3,2
1,1,3,3
---- TYPES
bigint,bigint,int,int
====
---- QUERY
# Test analytic function on top of a subplan that flattens an array.
select id, sum(item) over (partition by id) from complextypestbl t, t.int_array
---- RESULTS
1,6
1,6
1,6
2,6
2,6
2,6
2,6
2,6
2,6
8,-1
---- TYPES
bigint,bigint
====
---- QUERY
# Test analytic function on top of a subplan that flattens a map.
select id, max(key) over(partition by id), sum(value) over (partition by id)
from complextypestbl t, t.int_map
---- RESULTS
1,'k2',101
1,'k2',101
2,'k2',2
2,'k2',2
7,'k3',NULL
7,'k3',NULL
8,'k1',-1
---- TYPES
bigint,string,bigint
====
---- QUERY
# Tesh union of subplans.
select id, item from complextypestbl t, t.int_array
union all
select id, value from complextypestbl t, t.int_map
---- RESULTS
1,1
1,1
1,2
1,3
1,100
2,1
2,2
2,2
2,3
2,NULL
2,NULL
2,NULL
2,NULL
7,NULL
7,NULL
8,-1
8,-1
---- TYPES
bigint,int
====
---- QUERY
# Tesh union distinct of subplans.
select id, item from complextypestbl t, t.int_array
union distinct
select id, value from complextypestbl t, t.int_map
---- RESULTS
1,1
1,2
1,3
1,100
2,1
2,2
2,3
2,NULL
7,NULL
8,-1
---- TYPES
bigint,int
====
