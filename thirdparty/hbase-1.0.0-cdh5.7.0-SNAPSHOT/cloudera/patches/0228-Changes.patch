From 7243c2bf82786eb85d2275e65cfe26f87bcb8309 Mon Sep 17 00:00:00 2001
From: "Apekshit(Appy) Sharma" <appy@cloudera.com>
Date: Fri, 18 Sep 2015 10:19:52 -0700
Subject: [PATCH 228/295] Changes: - Fixes security docs to suggest use of
 'privacy' instead of 'auth-conf' for
 'hbase.rpc.protection' property. - Changes SaslUtil
 to accept both kinds of values
 (privacy/integrity/authentication OR
 auth-conf/auth-int/auth) to be backward compatible
 with wrong doc. - Change thrift's property
 'hbase.thrift.security.qop' to use same set of
 values(privacy/integrity/authentication) as
 '{hadoop,hbase}.rpc.protection'. 
 auth/auth-int/auth-conf are supported too for
 backward compat. - added exception throwing if
 configuration has wrong value.

Reason: Bug
Author: Apekshit Sharma
Ref: CDH-31694
---
 .../org/apache/hadoop/hbase/security/SaslUtil.java |   44 ++++++++++++++++----
 .../hbase/security/TestHBaseSaslRpcClient.java     |   10 +++++
 .../apache/hadoop/hbase/thrift2/ThriftServer.java  |   23 +++++-----
 src/main/asciidoc/_chapters/security.adoc          |   10 ++---
 4 files changed, 62 insertions(+), 25 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/security/SaslUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/security/SaslUtil.java
index 9cde790..1c7a77d 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/security/SaslUtil.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/security/SaslUtil.java
@@ -19,6 +19,8 @@
 package org.apache.hadoop.hbase.security;
 
 import org.apache.commons.codec.binary.Base64;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 
 import java.util.Map;
@@ -28,6 +30,7 @@ import javax.security.sasl.Sasl;
 
 @InterfaceAudience.Private
 public class SaslUtil {
+  private static final Log log = LogFactory.getLog(SaslUtil.class);
   public static final String SASL_DEFAULT_REALM = "default";
   public static final Map<String, String> SASL_PROPS =
       new TreeMap<String, String>();
@@ -66,16 +69,41 @@ public class SaslUtil {
     return new String(Base64.encodeBase64(password)).toCharArray();
   }
 
-  static void initSaslProperties(String rpcProtection) {
-    QualityOfProtection saslQOP = QualityOfProtection.AUTHENTICATION;
-    if (QualityOfProtection.INTEGRITY.name().toLowerCase()
-        .equals(rpcProtection)) {
-      saslQOP = QualityOfProtection.INTEGRITY;
-    } else if (QualityOfProtection.PRIVACY.name().toLowerCase().equals(
-        rpcProtection)) {
-      saslQOP = QualityOfProtection.PRIVACY;
+  /**
+   * Returns {@link org.apache.hadoop.hbase.security.SaslUtil.QualityOfProtection}
+   * corresponding to the given {@code stringQop} value. Returns null if value is
+   * invalid.
+   */
+  public static QualityOfProtection getQop(String stringQop) {
+    QualityOfProtection qop = null;
+    if (QualityOfProtection.AUTHENTICATION.name().toLowerCase().equals(stringQop)
+        || QualityOfProtection.AUTHENTICATION.saslQop.equals(stringQop)) {
+      qop = QualityOfProtection.AUTHENTICATION;
+    } else if (QualityOfProtection.INTEGRITY.name().toLowerCase().equals(stringQop)
+        || QualityOfProtection.INTEGRITY.saslQop.equals(stringQop)) {
+      qop = QualityOfProtection.INTEGRITY;
+    } else if (QualityOfProtection.PRIVACY.name().toLowerCase().equals(stringQop)
+        || QualityOfProtection.PRIVACY.saslQop.equals(stringQop)) {
+      qop = QualityOfProtection.PRIVACY;
+    }
+    if (qop == null) {
+      throw new IllegalArgumentException("Invalid qop: " +  stringQop
+          + ". It must be one of 'authentication', 'integrity', 'privacy'.");
+    }
+    if (QualityOfProtection.AUTHENTICATION.saslQop.equals(stringQop)
+        || QualityOfProtection.INTEGRITY.saslQop.equals(stringQop)
+        || QualityOfProtection.PRIVACY.saslQop.equals(stringQop)) {
+      log.warn("Use authentication/integrity/privacy as value for rpc protection "
+          + "configurations instead of auth/auth-int/auth-conf.");
     }
+    return qop;
+  }
 
+  static void initSaslProperties(String rpcProtection) {
+    QualityOfProtection saslQOP = getQop(rpcProtection);
+    if (saslQOP == null) {
+      saslQOP = QualityOfProtection.AUTHENTICATION;
+    }
     SaslUtil.SASL_PROPS.put(Sasl.QOP, saslQOP.getSaslQop());
     SaslUtil.SASL_PROPS.put(Sasl.SERVER_AUTH, "true");
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestHBaseSaslRpcClient.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestHBaseSaslRpcClient.java
index 7125632..db4a8ee 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestHBaseSaslRpcClient.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/TestHBaseSaslRpcClient.java
@@ -52,8 +52,10 @@ import org.apache.hadoop.security.token.TokenIdentifier;
 import org.apache.log4j.Level;
 import org.apache.log4j.Logger;
 import org.junit.BeforeClass;
+import org.junit.Rule;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
+import org.junit.rules.ExpectedException;
 import org.mockito.Mockito;
 
 import com.google.common.base.Strings;
@@ -71,6 +73,10 @@ public class TestHBaseSaslRpcClient {
 
   private static final Logger LOG = Logger.getLogger(TestHBaseSaslRpcClient.class);
 
+
+  @Rule
+  public ExpectedException exception = ExpectedException.none();
+
   @BeforeClass
   public static void before() {
     Logger.getRootLogger().setLevel(Level.DEBUG);
@@ -100,6 +106,10 @@ public class TestHBaseSaslRpcClient {
         "integrity");
     assertTrue(SaslUtil.SASL_PROPS.get(Sasl.QOP).equals(SaslUtil.QualityOfProtection.
         INTEGRITY.getSaslQop()));
+
+    exception.expect(IllegalArgumentException.class);
+    new HBaseSaslRpcClient(AuthMethod.DIGEST, token, "principal/host@DOMAIN.COM", false,
+        "wrongvalue");
   }
 
   @Test
diff --git a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java
index 9430503..f747dc8 100644
--- a/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java
+++ b/hbase-thrift/src/main/java/org/apache/hadoop/hbase/thrift2/ThriftServer.java
@@ -53,6 +53,7 @@ import org.apache.hadoop.hbase.HBaseConfiguration;
 import org.apache.hadoop.hbase.HBaseInterfaceAudience;
 import org.apache.hadoop.hbase.filter.ParseFilter;
 import org.apache.hadoop.hbase.http.InfoServer;
+import org.apache.hadoop.hbase.security.SaslUtil;
 import org.apache.hadoop.hbase.security.SecurityUtil;
 import org.apache.hadoop.hbase.security.UserProvider;
 import org.apache.hadoop.hbase.thrift.CallQueue;
@@ -96,9 +97,9 @@ public class ThriftServer {
 
   /**
    * Thrift quality of protection configuration key. Valid values can be:
-   * auth-conf: authentication, integrity and confidentiality checking
-   * auth-int: authentication and integrity checking
-   * auth: authentication only
+   * privacy: authentication, integrity and confidentiality checking
+   * integrity: authentication and integrity checking
+   * authentication: authentication only
    *
    * This is used to authenticate the callers and support impersonation.
    * The thrift server and the HBase cluster must run in secure mode.
@@ -161,7 +162,8 @@ public class ThriftServer {
   }
 
   private static TTransportFactory getTTransportFactory(
-      String qop, String name, String host, boolean framed, int frameSize) {
+      SaslUtil.QualityOfProtection qop, String name, String host,
+      boolean framed, int frameSize) {
     if (framed) {
       if (qop != null) {
         throw new RuntimeException("Thrift server authentication"
@@ -173,7 +175,7 @@ public class ThriftServer {
       return new TTransportFactory();
     } else {
       Map<String, String> saslProperties = new HashMap<String, String>();
-      saslProperties.put(Sasl.QOP, qop);
+      saslProperties.put(Sasl.QOP, qop.getSaslQop());
       TSaslServerTransport.Factory saslFactory = new TSaslServerTransport.Factory();
       saslFactory.addServerDefinition("GSSAPI", name, host, saslProperties,
         new SaslGssCallbackHandler() {
@@ -371,13 +373,10 @@ public class ThriftServer {
     }
 
     UserGroupInformation realUser = userProvider.getCurrent().getUGI();
-    String qop = conf.get(THRIFT_QOP_KEY);
-    if (qop != null) {
-      if (!qop.equals("auth") && !qop.equals("auth-int")
-          && !qop.equals("auth-conf")) {
-        throw new IOException("Invalid " + THRIFT_QOP_KEY + ": " + qop
-          + ", it must be 'auth', 'auth-int', or 'auth-conf'");
-      }
+    String stringQop = conf.get(THRIFT_QOP_KEY);
+    SaslUtil.QualityOfProtection qop = null;
+    if (stringQop != null) {
+      qop = SaslUtil.getQop(stringQop);
       if (!securityEnabled) {
         throw new IOException("Thrift server must"
           + " run in secure mode to support authentication");
diff --git a/src/main/asciidoc/_chapters/security.adoc b/src/main/asciidoc/_chapters/security.adoc
index c2a50de..e97c70b 100644
--- a/src/main/asciidoc/_chapters/security.adoc
+++ b/src/main/asciidoc/_chapters/security.adoc
@@ -203,9 +203,9 @@ To enable it, do the following.
 . Be sure that HBase is configured to allow proxy users, as described in <<security.rest.gateway>>.
 . In _hbase-site.xml_ for each cluster node running a Thrift gateway, set the property `hbase.thrift.security.qop` to one of the following three values:
 +
-* `auth-conf` - authentication, integrity, and confidentiality checking
-* `auth-int` - authentication and integrity checking
-* `auth` - authentication checking only
+* `privacy` - authentication, integrity, and confidentiality checking.
+* `integrity` - authentication and integrity checking
+* `authentication` - authentication checking only
 
 . Restart the Thrift gateway processes for the changes to take effect.
   If a node is running Thrift, the output of the `jps` command will list a `ThriftServer` process.
@@ -737,7 +737,7 @@ For an example of using both together, see <<security.example.config>>.
 </property>
 ----
 +
-Optionally, you can enable transport security, by setting `hbase.rpc.protection` to `auth-conf`.
+Optionally, you can enable transport security, by setting `hbase.rpc.protection` to `privacy`.
 This requires HBase 0.98.4 or newer.
 
 . Set up the Hadoop group mapper in the Hadoop namenode's _core-site.xml_.
@@ -1583,7 +1583,7 @@ All options have been discussed separately in the sections above.
 <!-- Secure RPC Transport -->
 <property>
   <name>hbase.rpc.protection</name>
-  <value>auth-conf</value>
+  <value>privacy</value>
  </property>
  <!-- Transparent Encryption -->
 <property>
-- 
1.7.9.5

