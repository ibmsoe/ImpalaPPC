From 66046caf20d6e14e194ef782c5a3d336876d2201 Mon Sep 17 00:00:00 2001
From: Victoria Dudin <vdudin@vdudin-mbp.local>
Date: Tue, 3 Feb 2015 09:47:46 -0800
Subject: [PATCH 271/295] HBASE-12961 Fix negative values in read and write
 region server metrics.

Reason: Bug
Author: Victoria
Ref: CDH-14751

Change-Id: I08986472f2a2c8e998d3acd0634567a832283ce8
---
 .../java/org/apache/hadoop/hbase/ServerLoad.java   |    8 ++++----
 .../org/apache/hadoop/hbase/TestServerLoad.java    |   14 +++++++++++---
 2 files changed, 15 insertions(+), 7 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java
index 370862a..4f4d301 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/ServerLoad.java
@@ -48,8 +48,8 @@ public class ServerLoad {
   private int storefileSizeMB = 0;
   private int memstoreSizeMB = 0;
   private int storefileIndexSizeMB = 0;
-  private int readRequestsCount = 0;
-  private int writeRequestsCount = 0;
+  private long readRequestsCount = 0;
+  private long writeRequestsCount = 0;
   private int rootIndexSizeKB = 0;
   private int totalStaticIndexSizeKB = 0;
   private int totalStaticBloomSizeKB = 0;
@@ -141,11 +141,11 @@ public class ServerLoad {
     return storefileIndexSizeMB;
   }
 
-  public int getReadRequestsCount() {
+  public long getReadRequestsCount() {
     return readRequestsCount;
   }
 
-  public int getWriteRequestsCount() {
+  public long getWriteRequestsCount() {
     return writeRequestsCount;
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerLoad.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerLoad.java
index 4dcfe24..a2af693 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerLoad.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/TestServerLoad.java
@@ -42,7 +42,7 @@ public class TestServerLoad {
     assertEquals(504, sl.getRootIndexSizeKB());
     assertEquals(820, sl.getStorefileSizeInMB());
     assertEquals(82, sl.getStorefileIndexSizeInMB());
-    assertEquals(0, sl.getReadRequestsCount());
+    assertEquals(((long)Integer.MAX_VALUE)*2, sl.getReadRequestsCount());
     
   }
  
@@ -58,6 +58,14 @@ public class TestServerLoad {
     assertTrue(slToString.contains("coprocessors=[]"));
   }
 
+  @Test
+  public void testRegionLoadWrapAroundAggregation() {
+	  ServerLoad sl = new ServerLoad(createServerLoadProto());
+	  long totalCount = ((long)Integer.MAX_VALUE)*2;
+	  assertEquals(totalCount, sl.getReadRequestsCount());
+	  assertEquals(totalCount, sl.getWriteRequestsCount());
+  }
+  
   private ClusterStatusProtos.ServerLoad createServerLoadProto() {
     HBaseProtos.RegionSpecifier rSpecOne =
         HBaseProtos.RegionSpecifier.newBuilder()
@@ -71,11 +79,11 @@ public class TestServerLoad {
     ClusterStatusProtos.RegionLoad rlOne =
         ClusterStatusProtos.RegionLoad.newBuilder().setRegionSpecifier(rSpecOne).setStores(10)
             .setStorefiles(101).setStoreUncompressedSizeMB(106).setStorefileSizeMB(520)
-            .setStorefileIndexSizeMB(42).setRootIndexSizeKB(201).build();
+            .setStorefileIndexSizeMB(42).setRootIndexSizeKB(201).setReadRequestsCount(Integer.MAX_VALUE).setWriteRequestsCount(Integer.MAX_VALUE).build();
     ClusterStatusProtos.RegionLoad rlTwo =
         ClusterStatusProtos.RegionLoad.newBuilder().setRegionSpecifier(rSpecTwo).setStores(3)
             .setStorefiles(13).setStoreUncompressedSizeMB(23).setStorefileSizeMB(300)
-            .setStorefileIndexSizeMB(40).setRootIndexSizeKB(303).build();
+            .setStorefileIndexSizeMB(40).setRootIndexSizeKB(303).setReadRequestsCount(Integer.MAX_VALUE).setWriteRequestsCount(Integer.MAX_VALUE).build();
 
     ClusterStatusProtos.ServerLoad sl =
         ClusterStatusProtos.ServerLoad.newBuilder().addRegionLoads(rlOne).
-- 
1.7.9.5

