From cc329a84db7b8e6b0a97a3e1977e6312a638cfad Mon Sep 17 00:00:00 2001
From: tedyu <yuzhihong@gmail.com>
Date: Mon, 16 Nov 2015 09:36:05 -0800
Subject: [PATCH 282/295] HBASE-14809 Grant / revoke Namespace admin
 permission to group

Reason: Bug
Author: Ted Yu
Ref: CDH-34625

Change-Id: I5df5071db610eb893c398cf3f679eed83c11b31e
---
 .../hbase/security/access/AccessController.java    |    4 +-
 .../security/access/TestNamespaceCommands.java     |  204 +++++++++++++++++---
 2 files changed, 181 insertions(+), 27 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
index d1d12df..976931c 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/security/access/AccessController.java
@@ -2109,7 +2109,7 @@ public class AccessController extends BaseMasterAndRegionObserver
                 perm.getQualifier(), Action.ADMIN);
             break;
           case Namespace :
-            requireGlobalPermission("grant", Action.ADMIN, perm.getNamespace());
+            requireNamespacePermission("grant", perm.getNamespace(), Action.ADMIN);
             break;
         }
 
@@ -2160,7 +2160,7 @@ public class AccessController extends BaseMasterAndRegionObserver
                               perm.getQualifier(), Action.ADMIN);
             break;
           case Namespace :
-            requireGlobalPermission("revoke", Action.ADMIN, perm.getNamespace());
+            requireNamespacePermission("revoke", perm.getNamespace(), Action.ADMIN);
             break;
         }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestNamespaceCommands.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestNamespaceCommands.java
index 2aabeed..18afff7 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestNamespaceCommands.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/security/access/TestNamespaceCommands.java
@@ -22,7 +22,10 @@ import static org.junit.Assert.assertTrue;
 
 import java.util.List;
 import java.util.Arrays;
+import java.util.Map;
 
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
 import org.apache.hadoop.conf.Configuration;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HColumnDescriptor;
@@ -55,6 +58,7 @@ import com.google.protobuf.BlockingRpcChannel;
 @Category(MediumTests.class)
 public class TestNamespaceCommands extends SecureTestUtil {
   private static HBaseTestingUtility UTIL = new HBaseTestingUtility();
+  private static final Log LOG = LogFactory.getLog(TestNamespaceCommands.class);
   private static String TEST_NAMESPACE = "ns1";
   private static String TEST_NAMESPACE2 = "ns2";
   private static Configuration conf;
@@ -91,6 +95,18 @@ public class TestNamespaceCommands extends SecureTestUtil {
   //user with create table permissions alone
   private static User USER_TABLE_CREATE; // TODO: WE DO NOT GIVE ANY PERMS TO THIS USER
 
+  private static final String GROUP_ADMIN = "group_admin";
+  private static final String GROUP_NS_ADMIN = "group_ns_admin";
+  private static final String GROUP_CREATE = "group_create";
+  private static final String GROUP_READ = "group_read";
+  private static final String GROUP_WRITE = "group_write";
+
+  private static User USER_GROUP_ADMIN;
+  private static User USER_GROUP_NS_ADMIN;
+  private static User USER_GROUP_CREATE;
+  private static User USER_GROUP_READ;
+  private static User USER_GROUP_WRITE;
+
   private static String TEST_TABLE = TEST_NAMESPACE + ":testtable";
   private static byte[] TEST_FAMILY = Bytes.toBytes("f1");
 
@@ -115,6 +131,18 @@ public class TestNamespaceCommands extends SecureTestUtil {
 
     USER_TABLE_CREATE = User.createUserForTesting(conf, "table_create", new String[0]);
     USER_TABLE_WRITE = User.createUserForTesting(conf, "table_write", new String[0]);
+
+    USER_GROUP_ADMIN =
+        User.createUserForTesting(conf, "user_group_admin", new String[] { GROUP_ADMIN });
+    USER_GROUP_NS_ADMIN =
+        User.createUserForTesting(conf, "user_group_ns_admin", new String[] { GROUP_NS_ADMIN });
+    USER_GROUP_CREATE =
+        User.createUserForTesting(conf, "user_group_create", new String[] { GROUP_CREATE });
+    USER_GROUP_READ =
+        User.createUserForTesting(conf, "user_group_read", new String[] { GROUP_READ });
+    USER_GROUP_WRITE =
+        User.createUserForTesting(conf, "user_group_write", new String[] { GROUP_WRITE });
+
     // TODO: other table perms
 
     UTIL.startMiniCluster();
@@ -141,8 +169,15 @@ public class TestNamespaceCommands extends SecureTestUtil {
     grantOnNamespace(UTIL, USER_NS_WRITE.getShortName(),  TEST_NAMESPACE, Permission.Action.WRITE);
     grantOnNamespace(UTIL, USER_NS_READ.getShortName(),   TEST_NAMESPACE, Permission.Action.READ);
     grantOnNamespace(UTIL, USER_NS_EXEC.getShortName(),   TEST_NAMESPACE, Permission.Action.EXEC);
+    grantOnNamespace(UTIL, AccessControlLists.toGroupEntry(GROUP_NS_ADMIN), TEST_NAMESPACE,
+        Permission.Action.ADMIN);
 
     grantOnNamespace(UTIL, USER_NS_ADMIN.getShortName(), TEST_NAMESPACE2, Permission.Action.ADMIN);
+
+    grantGlobal(UTIL, AccessControlLists.toGroupEntry(GROUP_ADMIN), Permission.Action.ADMIN);
+    grantGlobal(UTIL, AccessControlLists.toGroupEntry(GROUP_CREATE), Permission.Action.CREATE);
+    grantGlobal(UTIL, AccessControlLists.toGroupEntry(GROUP_READ), Permission.Action.READ);
+    grantGlobal(UTIL, AccessControlLists.toGroupEntry(GROUP_WRITE), Permission.Action.WRITE);
   }
 
   @AfterClass
@@ -161,7 +196,10 @@ public class TestNamespaceCommands extends SecureTestUtil {
           AccessControlLists.getNamespacePermissions(conf, TEST_NAMESPACE);
 
       perms = AccessControlLists.getNamespacePermissions(conf, TEST_NAMESPACE);
-      assertEquals(5, perms.size());
+      for (Map.Entry<String, TablePermission> entry : perms.entries()) {
+        LOG.debug(entry);
+      }
+      assertEquals(6, perms.size());
 
       // Grant and check state in ACL table
       grantOnNamespace(UTIL, userTestNamespace, TEST_NAMESPACE,
@@ -170,7 +208,7 @@ public class TestNamespaceCommands extends SecureTestUtil {
       Result result = acl.get(new Get(Bytes.toBytes(userTestNamespace)));
       assertTrue(result != null);
       perms = AccessControlLists.getNamespacePermissions(conf, TEST_NAMESPACE);
-      assertEquals(6, perms.size());
+      assertEquals(7, perms.size());
       List<TablePermission> namespacePerms = perms.get(userTestNamespace);
       assertTrue(perms.containsKey(userTestNamespace));
       assertEquals(1, namespacePerms.size());
@@ -186,7 +224,7 @@ public class TestNamespaceCommands extends SecureTestUtil {
         Permission.Action.WRITE);
 
       perms = AccessControlLists.getNamespacePermissions(conf, TEST_NAMESPACE);
-      assertEquals(5, perms.size());
+      assertEquals(6, perms.size());
     }
   }
 
@@ -203,7 +241,8 @@ public class TestNamespaceCommands extends SecureTestUtil {
     // modifyNamespace: superuser | global(A) | NS(A)
     verifyAllowed(modifyNamespace,
       SUPERUSER,
-      USER_GLOBAL_ADMIN);
+      USER_GLOBAL_ADMIN,
+      USER_GROUP_ADMIN);
 
     verifyDenied(modifyNamespace,
         USER_GLOBAL_CREATE,
@@ -214,7 +253,10 @@ public class TestNamespaceCommands extends SecureTestUtil {
         USER_NS_CREATE,
         USER_NS_WRITE,
         USER_NS_READ,
-        USER_NS_EXEC);
+        USER_NS_EXEC,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
   }
 
   @Test
@@ -240,7 +282,8 @@ public class TestNamespaceCommands extends SecureTestUtil {
     // createNamespace: superuser | global(A)
     verifyAllowed(createNamespace,
       SUPERUSER,
-      USER_GLOBAL_ADMIN);
+      USER_GLOBAL_ADMIN,
+      USER_GROUP_ADMIN);
 
     // all others should be denied
     verifyDenied(createNamespace,
@@ -254,12 +297,16 @@ public class TestNamespaceCommands extends SecureTestUtil {
         USER_NS_READ,
         USER_NS_EXEC,
         USER_TABLE_CREATE,
-        USER_TABLE_WRITE);
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
 
     // deleteNamespace: superuser | global(A) | NS(A)
     verifyAllowed(deleteNamespace,
       SUPERUSER,
-      USER_GLOBAL_ADMIN);
+      USER_GLOBAL_ADMIN,
+      USER_GROUP_ADMIN);
 
     verifyDenied(deleteNamespace,
         USER_GLOBAL_CREATE,
@@ -272,7 +319,11 @@ public class TestNamespaceCommands extends SecureTestUtil {
         USER_NS_READ,
         USER_NS_EXEC,
         USER_TABLE_CREATE,
-        USER_TABLE_WRITE);
+        USER_TABLE_WRITE,
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
   }
 
   @Test
@@ -289,7 +340,8 @@ public class TestNamespaceCommands extends SecureTestUtil {
     verifyAllowed(getNamespaceAction,
       SUPERUSER,
       USER_GLOBAL_ADMIN,
-      USER_NS_ADMIN);
+      USER_NS_ADMIN,
+      USER_GROUP_ADMIN);
 
     verifyDenied(getNamespaceAction,
         USER_GLOBAL_CREATE,
@@ -301,7 +353,10 @@ public class TestNamespaceCommands extends SecureTestUtil {
         USER_NS_READ,
         USER_NS_EXEC,
         USER_TABLE_CREATE,
-        USER_TABLE_WRITE);
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
   }
 
   @Test
@@ -327,13 +382,15 @@ public class TestNamespaceCommands extends SecureTestUtil {
     verifyAllowed(listAction,
       SUPERUSER,
       USER_GLOBAL_ADMIN,
-      USER_NS_ADMIN);
+      USER_NS_ADMIN,
+      USER_GROUP_ADMIN);
 
     // we have 3 namespaces: [default, hbase, TEST_NAMESPACE, TEST_NAMESPACE2]
-    assertEquals(4, ((List)SUPERUSER.runAs(listAction)).size());
+    assertEquals(4, ((List) SUPERUSER.runAs(listAction)).size());
     assertEquals(4, ((List)USER_GLOBAL_ADMIN.runAs(listAction)).size());
+    assertEquals(4, ((List)USER_GROUP_ADMIN.runAs(listAction)).size());
 
-    assertEquals(2, ((List)USER_NS_ADMIN.runAs(listAction)).size());
+    assertEquals(2, ((List) USER_NS_ADMIN.runAs(listAction)).size());
 
     assertEquals(0, ((List)USER_GLOBAL_CREATE.runAs(listAction)).size());
     assertEquals(0, ((List)USER_GLOBAL_WRITE.runAs(listAction)).size());
@@ -345,6 +402,9 @@ public class TestNamespaceCommands extends SecureTestUtil {
     assertEquals(0, ((List)USER_NS_EXEC.runAs(listAction)).size());
     assertEquals(0, ((List)USER_TABLE_CREATE.runAs(listAction)).size());
     assertEquals(0, ((List)USER_TABLE_WRITE.runAs(listAction)).size());
+    assertEquals(0, ((List)USER_GROUP_CREATE.runAs(listAction)).size());
+    assertEquals(0, ((List)USER_GROUP_READ.runAs(listAction)).size());
+    assertEquals(0, ((List)USER_GROUP_WRITE.runAs(listAction)).size());
   }
 
   @Test
@@ -368,6 +428,21 @@ public class TestNamespaceCommands extends SecureTestUtil {
       }
     };
 
+    AccessTestAction grantNamespaceAction = new AccessTestAction() {
+      @Override
+      public Object run() throws Exception {
+        try(Connection conn = ConnectionFactory.createConnection(conf);
+            Table acl = conn.getTable(AccessControlLists.ACL_TABLE_NAME)) {
+          BlockingRpcChannel service = acl.coprocessorService(HConstants.EMPTY_START_ROW);
+          AccessControlService.BlockingInterface protocol =
+            AccessControlService.newBlockingStub(service);
+          ProtobufUtil.grant(protocol, USER_GROUP_NS_ADMIN.getShortName(),
+            TEST_NAMESPACE, Action.READ);
+        }
+        return null;
+      }
+    };
+
     AccessTestAction revokeAction = new AccessTestAction() {
       public Object run() throws Exception {
         try (Connection connection = ConnectionFactory.createConnection(conf);
@@ -382,6 +457,25 @@ public class TestNamespaceCommands extends SecureTestUtil {
       }
     };
 
+    AccessTestAction revokeNamespaceAction = new AccessTestAction() {
+      public Object run() throws Exception {
+        Connection connection = ConnectionFactory.createConnection(conf);
+        Table acl = connection.getTable(AccessControlLists.ACL_TABLE_NAME);
+        try {
+          BlockingRpcChannel service =
+              acl.coprocessorService(HConstants.EMPTY_START_ROW);
+          AccessControlService.BlockingInterface protocol =
+            AccessControlService.newBlockingStub(service);
+          ProtobufUtil.revoke(protocol, USER_GROUP_NS_ADMIN.getShortName(),
+            TEST_NAMESPACE, Action.READ);
+        } finally {
+          acl.close();
+          connection.close();
+        }
+        return null;
+      }
+    };
+
     AccessTestAction getPermissionsAction = new AccessTestAction() {
       @Override
       public Object run() throws Exception {
@@ -398,42 +492,95 @@ public class TestNamespaceCommands extends SecureTestUtil {
 
     verifyAllowed(grantAction,
       SUPERUSER,
-      USER_GLOBAL_ADMIN);
+      USER_GLOBAL_ADMIN,
+      USER_GROUP_ADMIN,
+      USER_NS_ADMIN);
 
     verifyDenied(grantAction,
         USER_GLOBAL_CREATE,
         USER_GLOBAL_WRITE,
         USER_GLOBAL_READ,
         USER_GLOBAL_EXEC,
-        USER_NS_ADMIN,
         USER_NS_CREATE,
         USER_NS_WRITE,
         USER_NS_READ,
         USER_NS_EXEC,
         USER_TABLE_CREATE,
-        USER_TABLE_WRITE);
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
+
+    verifyAllowed(grantNamespaceAction,
+      SUPERUSER,
+      USER_GLOBAL_ADMIN,
+      USER_GROUP_ADMIN,
+      USER_NS_ADMIN,
+      USER_GROUP_NS_ADMIN);
+
+    verifyDenied(grantNamespaceAction,
+        USER_GLOBAL_CREATE,
+        USER_GLOBAL_WRITE,
+        USER_GLOBAL_READ,
+        USER_GLOBAL_EXEC,
+        USER_NS_CREATE,
+        USER_NS_WRITE,
+        USER_NS_READ,
+        USER_NS_EXEC,
+        USER_TABLE_CREATE,
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
 
     verifyAllowed(revokeAction,
       SUPERUSER,
-      USER_GLOBAL_ADMIN);
+      USER_GLOBAL_ADMIN,
+      USER_GROUP_ADMIN,
+      USER_NS_ADMIN);
 
     verifyDenied(revokeAction,
         USER_GLOBAL_CREATE,
         USER_GLOBAL_WRITE,
         USER_GLOBAL_READ,
         USER_GLOBAL_EXEC,
-        USER_NS_ADMIN,
         USER_NS_CREATE,
         USER_NS_WRITE,
         USER_NS_READ,
         USER_NS_EXEC,
         USER_TABLE_CREATE,
-        USER_TABLE_WRITE);
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
 
-    verifyAllowed(getPermissionsAction,
+    verifyAllowed(revokeNamespaceAction,
       SUPERUSER,
       USER_GLOBAL_ADMIN,
-      USER_NS_ADMIN);
+      USER_GROUP_ADMIN,
+      USER_NS_ADMIN,
+      USER_GROUP_NS_ADMIN);
+
+    verifyDenied(revokeNamespaceAction,
+        USER_GLOBAL_CREATE,
+        USER_GLOBAL_WRITE,
+        USER_GLOBAL_READ,
+        USER_GLOBAL_EXEC,
+        USER_NS_CREATE,
+        USER_NS_WRITE,
+        USER_NS_READ,
+        USER_NS_EXEC,
+        USER_TABLE_CREATE,
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
+
+    verifyAllowed(getPermissionsAction,
+        SUPERUSER,
+        USER_GLOBAL_ADMIN,
+        USER_NS_ADMIN,
+        USER_GROUP_ADMIN);
 
     verifyDenied(getPermissionsAction,
         USER_GLOBAL_CREATE,
@@ -445,7 +592,10 @@ public class TestNamespaceCommands extends SecureTestUtil {
         USER_NS_READ,
         USER_NS_EXEC,
         USER_TABLE_CREATE,
-        USER_TABLE_WRITE);
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_CREATE);
   }
 
   @Test
@@ -464,7 +614,8 @@ public class TestNamespaceCommands extends SecureTestUtil {
     verifyAllowed(createTable,
       SUPERUSER,
       USER_GLOBAL_CREATE,
-      USER_NS_CREATE);
+      USER_NS_CREATE,
+      USER_GROUP_CREATE);
 
     verifyDenied(createTable,
         USER_GLOBAL_ADMIN,
@@ -476,6 +627,9 @@ public class TestNamespaceCommands extends SecureTestUtil {
         USER_NS_READ,
         USER_NS_EXEC,
         USER_TABLE_CREATE,
-        USER_TABLE_WRITE);
+        USER_TABLE_WRITE,
+        USER_GROUP_READ,
+        USER_GROUP_WRITE,
+        USER_GROUP_ADMIN);
   }
 }
-- 
1.7.9.5

