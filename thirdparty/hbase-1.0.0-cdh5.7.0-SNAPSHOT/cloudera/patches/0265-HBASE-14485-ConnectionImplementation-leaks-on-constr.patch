From bbcc85a17bc82b472839c873e7358de59689d422 Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Thu, 1 Oct 2015 13:18:22 -0700
Subject: [PATCH 265/295] HBASE-14485 ConnectionImplementation leaks on
 construction failure

Reason: Bug
Author: Matteo Bertozzi
Ref: CDH-30948
---
 .../hadoop/hbase/client/ConnectionManager.java     |   83 ++++++++++----------
 .../hadoop/hbase/client/RegistryFactory.java       |    4 +-
 .../hadoop/hbase/client/TestAsyncProcess.java      |   36 ++++++++-
 3 files changed, 77 insertions(+), 46 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
index bfc4ecb..65a7fdb 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
@@ -623,45 +623,10 @@ class ConnectionManager {
      */
     HConnectionImplementation(Configuration conf, boolean managed,
         ExecutorService pool, User user) throws IOException {
-      this(conf);
+      this.conf = conf;
       this.user = user;
       this.batchPool = pool;
       this.managed = managed;
-      this.registry = setupRegistry();
-      retrieveClusterId();
-
-      this.rpcClient = RpcClientFactory.createClient(this.conf, this.clusterId);
-      this.rpcControllerFactory = RpcControllerFactory.instantiate(conf);
-
-      // Do we publish the status?
-      boolean shouldListen = conf.getBoolean(HConstants.STATUS_PUBLISHED,
-          HConstants.STATUS_PUBLISHED_DEFAULT);
-      Class<? extends ClusterStatusListener.Listener> listenerClass =
-          conf.getClass(ClusterStatusListener.STATUS_LISTENER_CLASS,
-              ClusterStatusListener.DEFAULT_STATUS_LISTENER_CLASS,
-              ClusterStatusListener.Listener.class);
-      if (shouldListen) {
-        if (listenerClass == null) {
-          LOG.warn(HConstants.STATUS_PUBLISHED + " is true, but " +
-              ClusterStatusListener.STATUS_LISTENER_CLASS + " is not set - not listening status");
-        } else {
-          clusterStatusListener = new ClusterStatusListener(
-              new ClusterStatusListener.DeadServerHandler() {
-                @Override
-                public void newDead(ServerName sn) {
-                  clearCaches(sn);
-                  rpcClient.cancelConnections(sn);
-                }
-              }, conf, listenerClass);
-        }
-      }
-    }
-
-    /**
-     * For tests.
-     */
-    protected HConnectionImplementation(Configuration conf) {
-      this.conf = conf;
       this.tableConfig = new TableConfiguration(conf);
       this.closed = false;
       this.pause = conf.getLong(HConstants.HBASE_CLIENT_PAUSE,
@@ -680,16 +645,54 @@ class ConnectionManager {
       } else {
         this.nonceGenerator = new NoNonceGenerator();
       }
-      stats = ServerStatisticTracker.create(conf);
-      this.asyncProcess = createAsyncProcess(this.conf);
+
+      this.stats = ServerStatisticTracker.create(conf);
       this.usePrefetch = conf.getBoolean(HConstants.HBASE_CLIENT_PREFETCH,
           HConstants.DEFAULT_HBASE_CLIENT_PREFETCH);
       this.prefetchRegionLimit = conf.getInt(
         HConstants.HBASE_CLIENT_PREFETCH_LIMIT,
         HConstants.DEFAULT_HBASE_CLIENT_PREFETCH_LIMIT);
       this.interceptor = (new RetryingCallerInterceptorFactory(conf)).build();
+      this.rpcControllerFactory = RpcControllerFactory.instantiate(conf);
       this.rpcCallerFactory = RpcRetryingCallerFactory.instantiate(conf, interceptor, this.stats);
       this.backoffPolicy = ClientBackoffPolicyFactory.create(conf);
+      this.asyncProcess = createAsyncProcess(this.conf);
+
+      boolean shouldListen = conf.getBoolean(HConstants.STATUS_PUBLISHED,
+          HConstants.STATUS_PUBLISHED_DEFAULT);
+      Class<? extends ClusterStatusListener.Listener> listenerClass =
+          conf.getClass(ClusterStatusListener.STATUS_LISTENER_CLASS,
+              ClusterStatusListener.DEFAULT_STATUS_LISTENER_CLASS,
+              ClusterStatusListener.Listener.class);
+
+      try {
+        this.registry = setupRegistry();
+        retrieveClusterId();
+
+        this.rpcClient = RpcClientFactory.createClient(this.conf, this.clusterId);
+
+        // Do we publish the status?
+        if (shouldListen) {
+          if (listenerClass == null) {
+            LOG.warn(HConstants.STATUS_PUBLISHED + " is true, but " +
+                ClusterStatusListener.STATUS_LISTENER_CLASS + " is not set - not listening status");
+          } else {
+            clusterStatusListener = new ClusterStatusListener(
+                new ClusterStatusListener.DeadServerHandler() {
+                  @Override
+                  public void newDead(ServerName sn) {
+                    clearCaches(sn);
+                    rpcClient.cancelConnections(sn);
+                  }
+                }, conf, listenerClass);
+          }
+        }
+      } catch (Throwable e) {
+        // avoid leaks: registry, rpcClient, ...
+        LOG.debug("connection construction failed", e);
+        close();
+        throw e;
+      }
     }
 
     @Override
@@ -2240,9 +2243,7 @@ class ConnectionManager {
     // For tests to override.
     protected AsyncProcess createAsyncProcess(Configuration conf) {
       // No default pool available.
-      return new AsyncProcess(this, conf, this.batchPool,
-          RpcRetryingCallerFactory.instantiate(conf, this.getStatisticsTracker()), false,
-          RpcControllerFactory.instantiate(conf));
+      return new AsyncProcess(this, conf, batchPool, rpcCallerFactory, false, rpcControllerFactory);
     }
 
     @Override
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegistryFactory.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegistryFactory.java
index dc2cb7c..d7aa739 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegistryFactory.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegistryFactory.java
@@ -26,13 +26,15 @@ import org.apache.hadoop.hbase.classification.InterfaceAudience;
  */
 @InterfaceAudience.Private
 class RegistryFactory {
+  static final String REGISTRY_IMPL_CONF_KEY = "hbase.client.registry.impl";
+
   /**
    * @return The cluster registry implementation to use.
    * @throws IOException
    */
   static Registry getRegistry(final Connection connection)
   throws IOException {
-    String registryClass = connection.getConfiguration().get("hbase.client.registry.impl",
+    String registryClass = connection.getConfiguration().get(REGISTRY_IMPL_CONF_KEY,
       ZooKeeperRegistry.class.getName());
     Registry registry = null;
     try {
diff --git a/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java b/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java
index a920c32..d9c6305 100644
--- a/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java
+++ b/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestAsyncProcess.java
@@ -338,11 +338,40 @@ public class TestAsyncProcess {
    * Returns our async process.
    */
   static class MyConnectionImpl extends ConnectionManager.HConnectionImplementation {
+    public static class TestRegistry implements Registry {
+      @Override
+      public void init(Connection connection) {}
+
+      @Override
+      public RegionLocations getMetaRegionLocation() throws IOException {
+        return null;
+      }
+
+      @Override
+      public String getClusterId() {
+        return "testClusterId";
+      }
+
+      @Override
+      public boolean isTableOnlineState(TableName tableName, boolean enabled) throws IOException {
+        return false;
+      }
+
+      @Override
+      public int getCurrentNrHRS() throws IOException {
+        return 1;
+      }
+    }
+
     final AtomicInteger nbThreads = new AtomicInteger(0);
 
+    protected MyConnectionImpl(Configuration conf) throws IOException {
+      super(setupConf(conf), false);
+    }
 
-    protected MyConnectionImpl(Configuration conf) {
-      super(conf);
+    private static Configuration setupConf(Configuration conf) {
+      conf.setClass(RegistryFactory.REGISTRY_IMPL_CONF_KEY, TestRegistry.class, Registry.class);
+      return conf;
     }
 
     @Override
@@ -359,7 +388,7 @@ public class TestAsyncProcess {
     List<HRegionLocation> hrl;
     final boolean usedRegions[];
 
-    protected MyConnectionImpl2(List<HRegionLocation> hrl) {
+    protected MyConnectionImpl2(List<HRegionLocation> hrl) throws IOException {
       super(conf);
       this.hrl = hrl;
       this.usedRegions = new boolean[hrl.size()];
@@ -378,7 +407,6 @@ public class TestAsyncProcess {
       }
       return null;
     }
-
   }
 
   @Rule
-- 
1.7.9.5

