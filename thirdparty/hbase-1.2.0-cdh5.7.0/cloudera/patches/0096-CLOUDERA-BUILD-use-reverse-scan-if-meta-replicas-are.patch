From 7ab30a51a208d16365b8af7ac3241fb69b2571ee Mon Sep 17 00:00:00 2001
From: Matteo Bertozzi <matteo.bertozzi@cloudera.com>
Date: Mon, 14 Dec 2015 15:42:39 -0800
Subject: [PATCH 096/197] CLOUDERA-BUILD use reverse scan if meta replicas are enabled

Author: Matteo Bertozzi
Reason: Read-Replicas Compatibility
Ref: CDH-35510
---
 .../hadoop/hbase/client/ConnectionManager.java     |  111 +++++++++++++-------
 .../hadoop/hbase/client/TestMetaWithReplicas.java  |    5 +-
 2 files changed, 77 insertions(+), 39 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
index 896a08e..e527d96 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
@@ -727,7 +727,7 @@ class ConnectionManager {
       } else {
         this.metrics = null;
       }
-      
+
       this.hostnamesCanChange = conf.getBoolean(RESOLVE_HOSTNAME_ON_FAIL_KEY, true);
       this.metaCache = new MetaCache(this.metrics);
     }
@@ -1193,7 +1193,11 @@ class ConnectionManager {
             "table name cannot be null or zero length");
       }
       if (tableName.equals(TableName.META_TABLE_NAME)) {
-        return this.registry.getMetaRegionLocation();
+        if (useMetaReplicas) {
+          return locateMeta(tableName, useCache, replicaId);
+        } else {
+          return this.registry.getMetaRegionLocation();
+        }
       } else {
         // Region not in the cache - have to go to the meta RS
         return locateRegionInMeta(tableName, row, useCache, retry, replicaId);
@@ -1294,11 +1298,11 @@ class ConnectionManager {
       */
     private RegionLocations locateRegionInMeta(TableName tableName, byte[] row,
                    boolean useCache, boolean retry, int replicaId) throws IOException {
-      RegionLocations locations;
+
       // If we are supposed to be using the cache, look in the cache to see if
       // we already have the region.
       if (useCache) {
-        locations = getCachedLocation(tableName, row);
+        RegionLocations locations = getCachedLocation(tableName, row);
         if (locations != null && locations.getRegionLocation(replicaId) != null) {
           return locations;
         }
@@ -1309,6 +1313,19 @@ class ConnectionManager {
       // without knowing the precise region names.
       byte[] metaKey = HRegionInfo.createRegionName(tableName, row, HConstants.NINES, false);
 
+      Scan s = null;
+      if (useMetaReplicas) {
+        // for CDH-5.0 compatibility, we are not going to use reverse scan
+        // unless the user enabled meta replicas. In this case we know that
+        // the server support reverse scan.
+        s = new Scan();
+        s.setReversed(true);
+        s.setStartRow(metaKey);
+        s.setSmall(true);
+        s.setCaching(1);
+        s.setConsistency(Consistency.TIMELINE);
+      }
+
       int localNumRetries = (retry ? numTries : 1);
 
       for (int tries = 0; true; tries++) {
@@ -1318,7 +1335,7 @@ class ConnectionManager {
               " after " + localNumRetries + " tries.");
         }
         if (useCache) {
-          locations = getCachedLocation(tableName, row);
+          RegionLocations locations = getCachedLocation(tableName, row);
           if (locations != null && locations.getRegionLocation(replicaId) != null) {
             return locations;
           }
@@ -1331,48 +1348,68 @@ class ConnectionManager {
         RegionLocations metaLocation = null;
         // Query the meta region
         try {
-          // locate the meta region
-          metaLocation = locateRegion(TableName.META_TABLE_NAME, metaKey, false, false);
-          // If null still, go around again.
-          if (metaLocation == null) continue;
-          ClientService.BlockingInterface service = getClient(metaLocation.getDefaultRegionLocation().getServerName());
-
-          Result regionInfoRow;
-          // This block guards against two threads trying to load the meta
-          // region at the same time. The first will load the meta region and
-          // the second will use the value that the first one found.
-          if (useCache) {
-            if (TableName.META_TABLE_NAME.equals(tableName) && getRegionCachePrefetch(tableName)) {
-              // Check the cache again for a hit in case some other thread made the
-              // same query while we were waiting on the lock.
-              locations = getCachedLocation(tableName, row);
+          Result regionInfoRow = null;
+          if (s != null) {
+            ReversedClientScanner rcs = null;
+            try {
+              rcs = new ClientSmallReversedScanner(conf, s, TableName.META_TABLE_NAME, this,
+                rpcCallerFactory, rpcControllerFactory, getMetaLookupPool(), 0);
+              regionInfoRow = rcs.next();
+            } finally {
+              if (rcs != null) {
+                rcs.close();
+              }
+            }
+          }
+          // if we are using meta replicas, we may end up with an empty row,
+          // if the replica did not received the update yet.
+          // In this case we fallback to the old method for safety.
+          if (regionInfoRow == null) {
+            // locate the meta region (compatible with versions that does not support reverse scan)
+            metaLocation = locateRegion(TableName.META_TABLE_NAME, metaKey, false, false);
+            // If null still, go around again.
+            if (metaLocation == null) continue;
+
+            ClientService.BlockingInterface service =
+              getClient(metaLocation.getDefaultRegionLocation().getServerName());
+
+            // This block guards against two threads trying to load the meta
+            // region at the same time. The first will load the meta region and
+            // the second will use the value that the first one found.
+            if (useCache) {
+              if (TableName.META_TABLE_NAME.equals(tableName) && getRegionCachePrefetch(tableName)) {
+                // Check the cache again for a hit in case some other thread made the
+                // same query while we were waiting on the lock.
+                RegionLocations locations = getCachedLocation(tableName, row);
+                if (locations != null) {
+                  return locations;
+                }
+                // If the parent table is META, we may want to pre-fetch some
+                // region info into the global region cache for this table.
+                prefetchRegionCache(tableName, row);
+              }
+              RegionLocations locations = getCachedLocation(tableName, row);
               if (locations != null) {
                 return locations;
               }
-              // If the parent table is META, we may want to pre-fetch some
-              // region info into the global region cache for this table.
-              prefetchRegionCache(tableName, row);
+            } else {
+              // If we are not supposed to be using the cache, delete any existing cached location
+              // so it won't interfere.
+              metaCache.clearCache(tableName, row);
             }
-            locations = getCachedLocation(tableName, row);
-            if (locations != null) {
-              return locations;
-            }
-          } else {
-            // If we are not supposed to be using the cache, delete any existing cached location
-            // so it won't interfere.
-            metaCache.clearCache(tableName, row);
-          }
 
-          // Query the meta region for the location of the meta region
-          regionInfoRow = ProtobufUtil.getRowOrBefore(service,
-            metaLocation.getDefaultRegionLocation().getRegionInfo().getRegionName(), metaKey, HConstants.CATALOG_FAMILY);
+            // Query the meta region for the location of the meta region
+            regionInfoRow = ProtobufUtil.getRowOrBefore(service,
+              metaLocation.getDefaultRegionLocation().getRegionInfo().getRegionName(),
+              metaKey, HConstants.CATALOG_FAMILY);
+          }
 
           if (regionInfoRow == null) {
             throw new TableNotFoundException(tableName);
           }
 
           // convert the row result into the HRegionLocation we need!
-          locations = MetaTableAccessor.getRegionLocations(regionInfoRow);
+          RegionLocations locations = MetaTableAccessor.getRegionLocations(regionInfoRow);
           if (locations == null || locations.getRegionLocation(replicaId) == null) {
             throw new IOException("HRegionInfo was null in " +
               tableName + ", row=" + regionInfoRow);
@@ -1431,7 +1468,7 @@ class ConnectionManager {
           if (tries < localNumRetries - 1) {
             if (LOG.isDebugEnabled()) {
               LOG.debug("locateRegionInMeta parentTable=" +
-                  TableName.META_TABLE_NAME + ", metaLocation=" +
+                  TableName.META_TABLE_NAME + ", metaLocation=" + metaLocation +
                 ", attempt=" + tries + " of " +
                 localNumRetries + " failed; retrying after sleep of " +
                 ConnectionUtils.getPauseTime(this.pause, tries) + " because: " + e.getMessage());
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaWithReplicas.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaWithReplicas.java
index d0f6a97..157e4dd 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaWithReplicas.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaWithReplicas.java
@@ -246,8 +246,9 @@ public class TestMetaWithReplicas {
       TEST_UTIL.getHBaseAdmin().disableTable(TABLE);
       TEST_UTIL.getHBaseAdmin().deleteTable(TABLE);
     }
-    try (Table htable =
-        TEST_UTIL.createTable(TABLE, FAMILIES, TEST_UTIL.getConfiguration());) {
+    Configuration conf = new Configuration(TEST_UTIL.getConfiguration());
+    conf.setBoolean(HConstants.USE_META_REPLICAS, true);
+    try (Table htable = TEST_UTIL.createTable(TABLE, FAMILIES, conf)) {
       byte[] row = "test".getBytes();
       HConnectionImplementation c = ((HConnectionImplementation)((HTable)htable).connection);
       // check that metalookup pool would get created
-- 
1.7.0.4

