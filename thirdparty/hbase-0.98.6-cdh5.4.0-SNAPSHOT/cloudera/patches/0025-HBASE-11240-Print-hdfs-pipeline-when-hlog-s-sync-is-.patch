From 4d77f859dc00cd86ec2b46f57362332074d0650b Mon Sep 17 00:00:00 2001
From: stack <stack@apache.org>
Date: Tue, 1 Jul 2014 15:05:03 -0700
Subject: [PATCH 25/75] HBASE-11240 Print hdfs pipeline when hlog's sync is slow (Liu Shaohui)

Reason: Improvement
Author: Liu Shaohui
Ref: CDH-20349
---
 .../hadoop/hbase/regionserver/wal/FSHLog.java      |   68 +++++++++++++++++++-
 1 files changed, 67 insertions(+), 1 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java
index 5b179a1..3cb1160 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/FSHLog.java
@@ -62,6 +62,7 @@ import org.apache.hadoop.hbase.util.DrainBarrier;
 import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.util.HasThread;
+import org.apache.hadoop.hdfs.protocol.DatanodeInfo;
 import org.apache.hadoop.util.StringUtils;
 import org.cloudera.htrace.Trace;
 import org.cloudera.htrace.TraceScope;
@@ -111,6 +112,8 @@ import com.google.common.annotations.VisibleForTesting;
 class FSHLog implements HLog, Syncable {
   static final Log LOG = LogFactory.getLog(FSHLog.class);
 
+  private static final int DEFAULT_SLOW_SYNC_TIME_MS = 100; // in ms
+
   private final FileSystem fs;
   private final Path rootDir;
   private final Path dir;
@@ -137,6 +140,9 @@ class FSHLog implements HLog, Syncable {
   // rollWriter will be triggered
   private int minTolerableReplication;
   private Method getNumCurrentReplicas; // refers to DFSOutputStream.getNumCurrentReplicas
+  private final Method getPipeLine; // refers to DFSOutputStream.getPipeLine
+  private final int slowSyncNs;
+
   final static Object [] NO_ARGS = new Object []{};
 
   /** The barrier used to ensure that close() waits for all log rolls and flushes to finish. */
@@ -417,8 +423,12 @@ class FSHLog implements HLog, Syncable {
     // rollWriter sets this.hdfs_out if it can.
     rollWriter();
 
+    this.slowSyncNs =
+        1000000 * conf.getInt("hbase.regionserver.hlog.slowsync.ms",
+          DEFAULT_SLOW_SYNC_TIME_MS);
     // handle the reflection necessary to call getNumCurrentReplicas()
     this.getNumCurrentReplicas = getGetNumCurrentReplicas(this.hdfs_out);
+    this.getPipeLine = getGetPipeline(this.hdfs_out);
 
     final String n = Thread.currentThread().getName();
 
@@ -1250,7 +1260,16 @@ class FSHLog implements HLog, Syncable {
 
             this.isSyncing = false;
           }
-          metrics.finishSync(EnvironmentEdgeManager.currentTimeMillis() - now);
+          final long took = EnvironmentEdgeManager.currentTimeMillis() - now;
+          metrics.finishSync(took);
+          if (took > (slowSyncNs/1000000)) {
+            String msg =
+                new StringBuilder().append("Slow sync cost: ")
+                    .append(took).append(" ms, current pipeline: ")
+                    .append(Arrays.toString(getPipeLine())).toString();
+            Trace.addTimelineAnnotation(msg);
+            LOG.info(msg);
+          }
 
           // 3. wake up AsyncNotifier to notify(wake-up) all pending 'put'
           // handler threads on 'sync()'
@@ -1692,4 +1711,51 @@ class FSHLog implements HLog, Syncable {
       System.exit(-1);
     }
   }
+
+  /**
+   * Find the 'getPipeline' on the passed <code>os</code> stream.
+   * @return Method or null.
+   */
+  private Method getGetPipeline(final FSDataOutputStream os) {
+    Method m = null;
+    if (os != null) {
+      Class<? extends OutputStream> wrappedStreamClass = os.getWrappedStream()
+          .getClass();
+      try {
+        m = wrappedStreamClass.getDeclaredMethod("getPipeline",
+          new Class<?>[] {});
+        m.setAccessible(true);
+      } catch (NoSuchMethodException e) {
+        LOG.info("FileSystem's output stream doesn't support"
+            + " getPipeline; not available; fsOut="
+            + wrappedStreamClass.getName());
+      } catch (SecurityException e) {
+        LOG.info(
+          "Doesn't have access to getPipeline on "
+              + "FileSystems's output stream ; fsOut="
+              + wrappedStreamClass.getName(), e);
+        m = null; // could happen on setAccessible()
+      }
+    }
+    return m;
+  }
+
+  /**
+   * This method gets the pipeline for the current HLog.
+   * @return
+   */
+  DatanodeInfo[] getPipeLine() {
+    if (this.getPipeLine != null && this.hdfs_out != null) {
+      Object repl;
+      try {
+        repl = this.getPipeLine.invoke(getOutputStream(), NO_ARGS);
+        if (repl instanceof DatanodeInfo[]) {
+          return ((DatanodeInfo[]) repl);
+        }
+      } catch (Exception e) {
+        LOG.info("Get pipeline failed", e);
+      }
+    }
+    return new DatanodeInfo[0];
+  }
 }
-- 
1.7.0.4

