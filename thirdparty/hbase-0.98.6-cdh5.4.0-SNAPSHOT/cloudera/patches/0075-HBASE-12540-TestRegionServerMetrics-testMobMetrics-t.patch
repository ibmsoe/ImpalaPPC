From b3f8843686c4efa77d7aafdd9b119778fbf1f499 Mon Sep 17 00:00:00 2001
From: Jonathan M Hsieh <jmhsieh@apache.org>
Date: Wed, 10 Dec 2014 19:43:59 -0800
Subject: [PATCH 75/75] HBASE-12540 TestRegionServerMetrics#testMobMetrics test failure (Jingcheng Du and Jiajia Li)

Reason: Mob support
Author: Jingcheng Du and Jiajia Li
Ref: CDH-23093
---
 .../regionserver/TestRegionServerMetrics.java      |   14 +++++++-------
 1 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
index d3e1b28..cc2dd64 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
@@ -396,7 +396,7 @@ public class TestRegionServerMetrics {
     byte[] cf = Bytes.toBytes("d");
     byte[] qualifier = Bytes.toBytes("qual");
     byte[] val = Bytes.toBytes("mobdata");
-    int compactionThreshold = conf.getInt("hbase.hstore.compactionThreshold", 3);
+    int numHfiles = conf.getInt("hbase.hstore.compactionThreshold", 3) - 1;
     HTableDescriptor htd = new HTableDescriptor(tableName);
     HColumnDescriptor hcd = new HColumnDescriptor(cf);
     hcd.setMobEnabled(true);
@@ -406,14 +406,14 @@ public class TestRegionServerMetrics {
     HTable t = TEST_UTIL.createTable(htd, new byte[0][0], conf);
     HRegion region = rs.getOnlineRegions(tableName).get(0);
     t.setAutoFlush(true, true);
-    for (int insertCount = 0; insertCount < compactionThreshold; insertCount++) {
+    for (int insertCount = 0; insertCount < numHfiles; insertCount++) {
       Put p = new Put(Bytes.toBytes(insertCount));
       p.add(cf, qualifier, val);
       t.put(p);
       admin.flush(tableNameString);
     }
     metricsRegionServer.getRegionServerWrapper().forceRecompute();
-    metricsHelper.assertCounter("mobFlushCount", compactionThreshold, serverSource);
+    metricsHelper.assertCounter("mobFlushCount", numHfiles, serverSource);
     Scan scan = new Scan(Bytes.toBytes(0), Bytes.toBytes(2));
     ResultScanner scanner = t.getScanner(scan);
     scanner.next(100);
@@ -424,7 +424,7 @@ public class TestRegionServerMetrics {
     region.initialize();
     region.compactStores(true);
     metricsRegionServer.getRegionServerWrapper().forceRecompute();
-    metricsHelper.assertCounter("mobCompactedFromMobCellsCount", compactionThreshold,
+    metricsHelper.assertCounter("mobCompactedFromMobCellsCount", numHfiles,
         serverSource);
     metricsHelper.assertCounter("mobCompactedIntoMobCellsCount", 0, serverSource);
     scanner = t.getScanner(scan);
@@ -432,8 +432,8 @@ public class TestRegionServerMetrics {
     metricsRegionServer.getRegionServerWrapper().forceRecompute();
     // metrics are reset by the region initialization
     metricsHelper.assertCounter("mobScanCellsCount", 0, serverSource);
-    for (int insertCount = compactionThreshold;
-        insertCount < 2 * compactionThreshold - 1; insertCount++) {
+    for (int insertCount = numHfiles;
+        insertCount < 2 * numHfiles - 1; insertCount++) {
       Put p = new Put(Bytes.toBytes(insertCount));
       p.add(cf, qualifier, val);
       t.put(p);
@@ -445,7 +445,7 @@ public class TestRegionServerMetrics {
     metricsRegionServer.getRegionServerWrapper().forceRecompute();
     // metrics are reset by the region initialization
     metricsHelper.assertCounter("mobCompactedFromMobCellsCount", 0, serverSource);
-    metricsHelper.assertCounter("mobCompactedIntoMobCellsCount", 2 * compactionThreshold - 1,
+    metricsHelper.assertCounter("mobCompactedIntoMobCellsCount", 2 * numHfiles - 1,
         serverSource);
     t.close();
     admin.close();
-- 
1.7.0.4

