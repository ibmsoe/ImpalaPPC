From 7542c6397a33d8b0122e83568ead5cfb0d1dbc46 Mon Sep 17 00:00:00 2001
From: Huaxiang Sun <hsun@cloudera.com>
Date: Fri, 8 Jan 2016 18:54:02 -0800
Subject: [PATCH 190/217] HBASE-11339 Merge remote-tracking branch
 'apache/hbase-11339' (Jingcheng Du) (addendum)

Reason: New Feature
Author: Jonathan Hsieh
Ref: CDH-33507

Change-Id: If9109e8c1b9347166b720676a3b6dbb455b780c2
---
 .../hadoop/hbase/IntegrationTestIngestWithMOB.java |    2 +-
 .../master/procedure/DeleteTableProcedure.java     |   20 +++++++++++++++++++-
 .../hadoop/hbase/mob/mapreduce/SweepJob.java       |    4 ++--
 .../hadoop/hbase/mob/mapreduce/SweepMapper.java    |   14 ++++++++------
 .../hbase/regionserver/DefaultStoreEngine.java     |    2 +-
 .../client/TestMobSnapshotCloneIndependence.java   |    2 +-
 .../mob/filecompactions/TestMobFileCompactor.java  |    2 +-
 .../TestPartitionedMobFileCompactor.java           |    4 ++--
 .../hadoop/hbase/regionserver/TestHMobStore.java   |    2 +-
 .../hbase/regionserver/TestMobCompaction.java      |    8 ++++----
 .../regionserver/TestRegionServerMetrics.java      |   13 ++++++-------
 .../hbase/regionserver/TestStoreFileInfo.java      |    5 +++--
 .../hbase/snapshot/TestMobExportSnapshot.java      |    5 +++--
 .../snapshot/TestMobRestoreSnapshotHelper.java     |   11 ++++++-----
 14 files changed, 58 insertions(+), 36 deletions(-)

diff --git a/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java
index a416238..308870f 100644
--- a/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java
+++ b/hbase-it/src/test/java/org/apache/hadoop/hbase/IntegrationTestIngestWithMOB.java
@@ -40,7 +40,7 @@ import org.apache.hadoop.hbase.testclassification.IntegrationTests;
 public class IntegrationTestIngestWithMOB extends IntegrationTestIngest {
   private static final char COLON = ':';
 
-  private byte[] mobColumnFamily = LoadTestTool.COLUMN_FAMILY;
+  private byte[] mobColumnFamily = LoadTestTool.DEFAULT_COLUMN_FAMILY;
   public static final String THRESHOLD = "threshold";
   public static final String MIN_MOB_DATA_SIZE = "minMobDataSize";
   public static final String MAX_MOB_DATA_SIZE = "maxMobDataSize";
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteTableProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteTableProcedure.java
index 38b83a2..a531030 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteTableProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteTableProcedure.java
@@ -44,6 +44,8 @@ import org.apache.hadoop.hbase.client.ResultScanner;
 import org.apache.hadoop.hbase.client.Scan;
 import org.apache.hadoop.hbase.client.Table;
 import org.apache.hadoop.hbase.exceptions.HBaseException;
+import org.apache.hadoop.hbase.mob.MobConstants;
+import org.apache.hadoop.hbase.mob.MobUtils;
 import org.apache.hadoop.hbase.regionserver.HRegion;
 import org.apache.hadoop.hbase.master.AssignmentManager;
 import org.apache.hadoop.hbase.master.MasterCoprocessorHost;
@@ -342,10 +344,26 @@ public class DeleteTableProcedure
       LOG.debug("Table '" + tableName + "' archived!");
     }
 
+    // Archive mob data
+    Path mobTableDir = FSUtils.getTableDir(new Path(mfs.getRootDir(), MobConstants.MOB_DIR_NAME),
+            tableName);
+    Path regionDir =
+            new Path(mobTableDir, MobUtils.getMobRegionInfo(tableName).getEncodedName());
+    if (fs.exists(regionDir)) {
+      HFileArchiver.archiveRegion(fs, mfs.getRootDir(), mobTableDir, regionDir);
+    }
+
     // Delete table directory from FS (temp directory)
     if (!fs.delete(tempTableDir, true) && fs.exists(tempTableDir)) {
       throw new IOException("Couldn't delete " + tempTableDir);
     }
+
+    // Delete the table directory where the mob files are saved
+    if (mobTableDir != null && fs.exists(mobTableDir)) {
+      if (!fs.delete(mobTableDir, true)) {
+        throw new IOException("Couldn't delete mob dir " + mobTableDir);
+      }
+    }
   }
 
   /**
@@ -407,4 +425,4 @@ public class DeleteTableProcedure
       ProcedureSyncWait.getMasterQuotaManager(env).removeTableFromNamespaceQuota(tableName);
     }
   }
-}
\ No newline at end of file
+}
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepJob.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepJob.java
index 6e4ea98..4ac9c50 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepJob.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepJob.java
@@ -41,7 +41,7 @@ import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.Abortable;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HConstants;
-import org.apache.hadoop.hbase.KeyValue;
+import org.apache.hadoop.hbase.NoTagsKeyValue;
 import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.TableName;
 import org.apache.hadoop.hbase.client.Scan;
@@ -256,7 +256,7 @@ public class SweepJob {
 
     job.setInputFormatClass(TableInputFormat.class);
     job.setMapOutputKeyClass(Text.class);
-    job.setMapOutputValueClass(KeyValue.class);
+    job.setMapOutputValueClass(NoTagsKeyValue.class);
     job.setReducerClass(SweepReducer.class);
     job.setOutputFormatClass(NullOutputFormat.class);
     String jobName = getCustomJobName(this.getClass().getSimpleName(), tn, familyName);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepMapper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepMapper.java
index 56e5726..559d6db 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepMapper.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepMapper.java
@@ -21,7 +21,9 @@ package org.apache.hadoop.hbase.mob.mapreduce;
 import java.io.IOException;
 
 import org.apache.hadoop.classification.InterfaceAudience;
+import org.apache.hadoop.hbase.Cell;
 import org.apache.hadoop.hbase.KeyValue;
+import org.apache.hadoop.hbase.KeyValueUtil;
 import org.apache.hadoop.hbase.client.Result;
 import org.apache.hadoop.hbase.io.ImmutableBytesWritable;
 import org.apache.hadoop.hbase.mapreduce.TableMapper;
@@ -71,14 +73,14 @@ public class SweepMapper extends TableMapper<Text, KeyValue> {
     if (columns == null) {
       return;
     }
-    KeyValue[] kvList = columns.raw();
-    if (kvList == null || kvList.length == 0) {
+    Cell[] cells = columns.rawCells();
+    if (cells == null || cells.length == 0) {
       return;
     }
-    for (KeyValue kv : kvList) {
-      if (MobUtils.hasValidMobRefCellValue(kv)) {
-        String fileName = MobUtils.getMobFileName(kv);
-        context.write(new Text(fileName), kv);
+    for (Cell c : cells) {
+      if (MobUtils.hasValidMobRefCellValue(c)) {
+        String fileName = MobUtils.getMobFileName(c);
+        context.write(new Text(fileName), KeyValueUtil.ensureKeyValue(c));
       }
     }
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultStoreEngine.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultStoreEngine.java
index 3dc4188..4c30581 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultStoreEngine.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/DefaultStoreEngine.java
@@ -65,10 +65,10 @@ public class DefaultStoreEngine extends StoreEngine<
   @Override
   protected void createComponents(
       Configuration conf, Store store, KVComparator kvComparator) throws IOException {
-    storeFileManager = new DefaultStoreFileManager(kvComparator, conf, compactionPolicy.getConf());
     createCompactor(conf, store);
     createCompactionPolicy(conf, store);
     createStoreFlusher(conf, store);
+    storeFileManager = new DefaultStoreFileManager(kvComparator, conf, compactionPolicy.getConf());
   }
 
   protected void createCompactor(Configuration conf, Store store) throws IOException {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobSnapshotCloneIndependence.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobSnapshotCloneIndependence.java
index c9e4b3d..d307c40 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobSnapshotCloneIndependence.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMobSnapshotCloneIndependence.java
@@ -56,7 +56,7 @@ import org.junit.experimental.categories.Category;
  */
 @Category(LargeTests.class)
 public class TestMobSnapshotCloneIndependence {
-  private static final Log LOG = LogFactory.getLog(TestSnapshotCloneIndependence.class);
+  private static final Log LOG = LogFactory.getLog(TestMobSnapshotCloneIndependence.class);
 
   private static final HBaseTestingUtility UTIL = new HBaseTestingUtility();
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestMobFileCompactor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestMobFileCompactor.java
index 5abcfe1..c9777a4 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestMobFileCompactor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestMobFileCompactor.java
@@ -733,7 +733,7 @@ public class TestMobFileCompactor {
           Bytes.toBytes(tableNameAsString));
       for (HRegion region : regions) {
         region.waitForFlushesAndCompactions();
-        region.compactStores(true);
+        region.compact(true);
       }
     }
   }
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java
index 3c73d52..4a063e8 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/mob/filecompactions/TestPartitionedMobFileCompactor.java
@@ -393,12 +393,12 @@ public class TestPartitionedMobFileCompactor {
       sfs.add(sf);
     }
     List scanners = StoreFileScanner.getScannersForStoreFiles(sfs, false, true,
-        false, null, HConstants.LATEST_TIMESTAMP);
+        false, false, HConstants.LATEST_TIMESTAMP);
     Scan scan = new Scan();
     scan.setMaxVersions(hcd.getMaxVersions());
     long timeToPurgeDeletes = Math.max(conf.getLong("hbase.hstore.time.to.purge.deletes", 0), 0);
     long ttl = HStore.determineTTLFromFamily(hcd);
-    ScanInfo scanInfo = new ScanInfo(hcd, ttl, timeToPurgeDeletes, KeyValue.COMPARATOR);
+    ScanInfo scanInfo = new ScanInfo(conf, hcd, ttl, timeToPurgeDeletes, KeyValue.COMPARATOR);
     StoreScanner scanner = new StoreScanner(scan, scanInfo, ScanType.COMPACT_RETAIN_DELETES, null,
         scanners, 0L, HConstants.LATEST_TIMESTAMP);
     List<Cell> results = new ArrayList<>();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java
index 310ee9d..e084b87 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestHMobStore.java
@@ -168,7 +168,7 @@ public class TestHMobStore {
     KeyValue[] keys = new KeyValue[] { key1, key2, key3 };
     int maxKeyCount = keys.length;
     StoreFile.Writer mobWriter = store.createWriterInTmp(currentDate, maxKeyCount,
-        hcd.getCompactionCompression(), region.getStartKey());
+        hcd.getCompactionCompression(), region.getRegionInfo().getStartKey());
     mobFilePath = mobWriter.getPath();
 
     mobWriter.append(key1);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java
index 29bafc4..30bd5c2 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobCompaction.java
@@ -205,7 +205,7 @@ public class TestMobCompaction {
 
     // The following will bulk load the above generated store files and compact, with 600(fileSize)
     // > 300(threshold)
-    boolean result = region.bulkLoadHFiles(hfiles, true);
+    boolean result = region.bulkLoadHFiles(hfiles, true, null);
     assertTrue("Bulkload result:", result);
     assertEquals("Before compaction: store files", compactionThreshold, countStoreFiles());
     assertEquals("Before compaction: mob file count", 0, countMobFiles());
@@ -250,7 +250,7 @@ public class TestMobCompaction {
 
     assertEquals("Before compaction: store files", numHfiles + 1, countStoreFiles());
     assertEquals("Before compaction: mob files", numHfiles, countMobFiles());
-    region.compactStores(true);
+    region.compact(true);
     assertEquals("After compaction: store files", 1, countStoreFiles());
     // still have original mob hfiles and now added a mob del file
     assertEquals("After compaction: mob files", numHfiles + 1, countMobFiles());
@@ -443,13 +443,13 @@ public class TestMobCompaction {
           numDelfiles++;
         }
       }
-      List scanners = StoreFileScanner.getScannersForStoreFiles(sfs, false, true, false, null,
+      List scanners = StoreFileScanner.getScannersForStoreFiles(sfs, false, true, false, false,
           HConstants.LATEST_TIMESTAMP);
       Scan scan = new Scan();
       scan.setMaxVersions(hcd.getMaxVersions());
       long timeToPurgeDeletes = Math.max(conf.getLong("hbase.hstore.time.to.purge.deletes", 0), 0);
       long ttl = HStore.determineTTLFromFamily(hcd);
-      ScanInfo scanInfo = new ScanInfo(hcd, ttl, timeToPurgeDeletes, KeyValue.COMPARATOR);
+      ScanInfo scanInfo = new ScanInfo(conf, hcd, ttl, timeToPurgeDeletes, KeyValue.COMPARATOR);
       StoreScanner scanner = new StoreScanner(scan, scanInfo, ScanType.COMPACT_DROP_DELETES, null,
           scanners, 0L, HConstants.LATEST_TIMESTAMP);
       List<Cell> results = new ArrayList<>();
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
index defb2cb..3a322b1 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRegionServerMetrics.java
@@ -521,7 +521,7 @@ public class TestRegionServerMetrics {
     htd.addFamily(hcd);
     HBaseAdmin admin = new HBaseAdmin(conf);
     HTable t = TEST_UTIL.createTable(htd, new byte[0][0], conf);
-    HRegion region = rs.getOnlineRegions(tableName).get(0);
+    Region region = rs.getOnlineRegions(tableName).get(0);
     t.setAutoFlush(true, true);
     for (int insertCount = 0; insertCount < numHfiles; insertCount++) {
       Put p = new Put(Bytes.toBytes(insertCount));
@@ -538,11 +538,10 @@ public class TestRegionServerMetrics {
     metricsRegionServer.getRegionServerWrapper().forceRecompute();
     metricsHelper.assertCounter("mobScanCellsCount", 2, serverSource);
     region.getTableDesc().getFamily(cf).setMobThreshold(100);
-    region.initialize();
-    region.compactStores(true);
+    ((HRegion)region).initialize();
+    region.compact(true);
     metricsRegionServer.getRegionServerWrapper().forceRecompute();
-    metricsHelper.assertCounter("mobCompactedFromMobCellsCount", numHfiles,
-        serverSource);
+    metricsHelper.assertCounter("mobCompactedFromMobCellsCount", numHfiles, serverSource);
     metricsHelper.assertCounter("mobCompactedIntoMobCellsCount", 0, serverSource);
     scanner = t.getScanner(scan);
     scanner.next(100);
@@ -557,8 +556,8 @@ public class TestRegionServerMetrics {
       admin.flush(tableName);
     }
     region.getTableDesc().getFamily(cf).setMobThreshold(0);
-    region.initialize();
-    region.compactStores(true);
+    ((HRegion)region).initialize();
+    region.compact(true);
     metricsRegionServer.getRegionServerWrapper().forceRecompute();
     // metrics are reset by the region initialization
     metricsHelper.assertCounter("mobCompactedFromMobCellsCount", 0, serverSource);
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFileInfo.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFileInfo.java
index 5aa96c1..13c05ec 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFileInfo.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestStoreFileInfo.java
@@ -67,11 +67,12 @@ public class TestStoreFileInfo {
   public void testEqualsWithLink() throws IOException {
     Path origin = new Path("/origin");
     Path tmp = new Path("/tmp");
+    Path mob = new Path("/mob");
     Path archive = new Path("/archive");
     HFileLink link1 = new HFileLink(new Path(origin, "f1"), new Path(tmp, "f1"),
-      new Path(archive, "f1"));
+      new Path(mob, "f1"), new Path(archive, "f1"));
     HFileLink link2 = new HFileLink(new Path(origin, "f1"), new Path(tmp, "f1"),
-      new Path(archive, "f1"));
+      new Path(mob, "f1"), new Path(archive, "f1"));
 
 
     StoreFileInfo info1 = new StoreFileInfo(TEST_UTIL.getConfiguration(),
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobExportSnapshot.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobExportSnapshot.java
index 3b0989b..1d27adc 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobExportSnapshot.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobExportSnapshot.java
@@ -230,11 +230,12 @@ public class TestMobExportSnapshot {
     FileSystem fs = TEST_UTIL.getHBaseCluster().getMaster().getMasterFileSystem().getFileSystem();
 
     SnapshotMock snapshotMock = new SnapshotMock(TEST_UTIL.getConfiguration(), fs, rootDir);
-    SnapshotMock.SnapshotBuilder builder = snapshotMock.createSnapshotV2("tableWithRefsV1");
+    SnapshotMock.SnapshotBuilder builder =
+        snapshotMock.createSnapshotV2("tableWithRefsV1", "tableWithRefsV1");
     testSnapshotWithRefsExportFileSystemState(builder);
 
     snapshotMock = new SnapshotMock(TEST_UTIL.getConfiguration(), fs, rootDir);
-    builder = snapshotMock.createSnapshotV2("tableWithRefsV2");
+    builder = snapshotMock.createSnapshotV2("tableWithRefsV2", "tableWithRefsV2");
     testSnapshotWithRefsExportFileSystemState(builder);
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobRestoreSnapshotHelper.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobRestoreSnapshotHelper.java
index a6b1dff..08a0d10 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobRestoreSnapshotHelper.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/snapshot/TestMobRestoreSnapshotHelper.java
@@ -21,6 +21,7 @@ import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertTrue;
 
 import java.io.IOException;
+import java.util.List;
 
 import org.apache.commons.logging.Log;
 import org.apache.commons.logging.LogFactory;
@@ -109,12 +110,12 @@ public class TestMobRestoreSnapshotHelper {
 
   private void verifyRestore(final Path rootDir, final HTableDescriptor sourceHtd,
       final HTableDescriptor htdClone) throws IOException {
-    String[] files = SnapshotTestingUtils.listHFileNames(fs,
+    List<String> files = SnapshotTestingUtils.listHFileNames(fs,
       FSUtils.getTableDir(rootDir, htdClone.getTableName()));
-    assertEquals(12, files.length);
-    for (int i = 0; i < files.length; i += 2) {
-      String linkFile = files[i];
-      String refFile = files[i+1];
+    assertEquals(12, files.size());
+    for (int i = 0; i < files.size(); i += 2) {
+      String linkFile = files.get(i);
+      String refFile = files.get(i + 1);
       assertTrue(linkFile + " should be a HFileLink", HFileLink.isHFileLink(linkFile));
       assertTrue(refFile + " should be a Referene", StoreFileInfo.isReference(refFile));
       assertEquals(sourceHtd.getTableName(), HFileLink.getReferencedTableName(linkFile));
-- 
1.7.9.5

