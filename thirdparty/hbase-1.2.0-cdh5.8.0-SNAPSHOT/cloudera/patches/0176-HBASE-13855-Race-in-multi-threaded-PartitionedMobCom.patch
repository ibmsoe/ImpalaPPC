From ace75a5e96af9f05317a57df55423ac4fe5f3c53 Mon Sep 17 00:00:00 2001
From: anoopsjohn <anoopsamjohn@gmail.com>
Date: Thu, 11 Jun 2015 15:32:19 +0530
Subject: [PATCH 176/217] HBASE-13855 Race in multi threaded
 PartitionedMobCompactor causes NPE. (Jingcheng)

Reason: Bugfix
Author: Jingcheng Du
Ref: CDH-31077
---
 .../PartitionedMobFileCompactor.java               |   37 ++++++++++++++++----
 1 file changed, 30 insertions(+), 7 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java
index 0778ac1..355ba69 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/filecompactions/PartitionedMobFileCompactor.java
@@ -204,14 +204,22 @@ public class PartitionedMobFileCompactor extends MobFileCompactor {
     }
     List<Path> newDelPaths = compactDelFiles(request, delFilePaths);
     List<StoreFile> newDelFiles = new ArrayList<StoreFile>();
-    for (Path newDelPath : newDelPaths) {
-      StoreFile sf = new StoreFile(fs, newDelPath, conf, compactionCacheConfig, BloomType.NONE);
-      newDelFiles.add(sf);
+    List<Path> paths = null;
+    try {
+      for (Path newDelPath : newDelPaths) {
+        StoreFile sf = new StoreFile(fs, newDelPath, conf, compactionCacheConfig, BloomType.NONE);
+        // pre-create reader of a del file to avoid race condition when opening the reader in each
+        // partition.
+        sf.createReader();
+        newDelFiles.add(sf);
+      }
+      LOG.info("After merging, there are " + newDelFiles.size() + " del files");
+      // compact the mob files by partitions.
+      paths = compactMobFiles(request, newDelFiles);
+      LOG.info("After compaction, there are " + paths.size() + " mob files");
+    } finally {
+      closeStoreFileReaders(newDelFiles);
     }
-    LOG.info("After merging, there are " + newDelFiles.size() + " del files");
-    // compact the mob files by partitions.
-    List<Path> paths = compactMobFiles(request, newDelFiles);
-    LOG.info("After compaction, there are " + paths.size() + " mob files");
     // archive the del files if all the mob files are selected.
     if (request.type == CompactionType.ALL_FILES && !newDelPaths.isEmpty()) {
       LOG.info("After a mob file compaction with all files selected, archiving the del files "
@@ -329,6 +337,20 @@ public class PartitionedMobFileCompactor extends MobFileCompactor {
   }
 
   /**
+   * Closes the readers of store files.
+   * @param storeFiles The store files to be closed.
+   */
+  private void closeStoreFileReaders(List<StoreFile> storeFiles) {
+    for (StoreFile storeFile : storeFiles) {
+      try {
+        storeFile.closeReader(true);
+      } catch (IOException e) {
+        LOG.warn("Failed to close the reader on store file " + storeFile.getPath(), e);
+      }
+    }
+  }
+
+  /**
    * Compacts a partition of selected small mob files and all the del files in a batch.
    * @param request The compaction request.
    * @param partition A compaction partition.
@@ -407,6 +429,7 @@ public class PartitionedMobFileCompactor extends MobFileCompactor {
     }
     // archive the old mob files, do not archive the del files.
     try {
+      closeStoreFileReaders(mobFilesToCompact);
       MobUtils
         .removeMobFiles(conf, fs, tableName, mobTableDir, column.getName(), mobFilesToCompact);
     } catch (IOException e) {
-- 
1.7.9.5

