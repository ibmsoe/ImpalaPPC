From e1bc92c33407883dd246a2489be67e0bd606ae5c Mon Sep 17 00:00:00 2001
From: Jonathan M Hsieh <jmhsieh@apache.org>
Date: Sat, 16 May 2015 16:45:49 -0700
Subject: [PATCH 174/217] HBASE-13531 Flakey failure of
 TestAcidGuarantees#testMobScanAtomicity (Jingcheng
 Du)

rd point was not properly handled in the mob scanner case.

Minor changes with mvcc and checksums
Conflicts:
	hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
	hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
	hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java

Change-Id: Id04186f0c32cd7ae295508480f0caa6ae9e9d2fe
Reason: Bugfix
Author: Jingcheng Du
Ref: CDH-31077
---
 .../java/org/apache/hadoop/hbase/mob/MobFile.java  |   14 ++-
 .../org/apache/hadoop/hbase/mob/MobFileCache.java  |    4 +-
 .../java/org/apache/hadoop/hbase/mob/MobUtils.java |    2 +-
 .../hadoop/hbase/mob/mapreduce/SweepReducer.java   |    2 +
 .../hadoop/hbase/regionserver/HMobStore.java       |   26 +++--
 .../hadoop/hbase/regionserver/MobStoreScanner.java |    2 +-
 .../regionserver/ReversedMobStoreScanner.java      |    2 +-
 .../hadoop/hbase/regionserver/StoreScanner.java    |    2 +-
 .../hbase/regionserver/TestMobStoreScanner.java    |  100 +++++++++++++-------
 9 files changed, 110 insertions(+), 44 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFile.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFile.java
index a120057..09438db 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFile.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFile.java
@@ -71,13 +71,25 @@ public class MobFile {
    * @throws IOException
    */
   public Cell readCell(Cell search, boolean cacheMobBlocks) throws IOException {
+    return readCell(search, cacheMobBlocks, sf.getMaxMemstoreTS());
+  }
+
+  /**
+   * Reads a cell from the mob file.
+   * @param search The cell need to be searched in the mob file.
+   * @param cacheMobBlocks Should this scanner cache blocks.
+   * @param readPt the read point.
+   * @return The cell in the mob file.
+   * @throws IOException
+   */
+  public Cell readCell(Cell search, boolean cacheMobBlocks, long readPt) throws IOException {
     Cell result = null;
     StoreFileScanner scanner = null;
     List<StoreFile> sfs = new ArrayList<StoreFile>();
     sfs.add(sf);
     try {
       List<StoreFileScanner> sfScanners = StoreFileScanner.getScannersForStoreFiles(sfs,
-          cacheMobBlocks, true, false, null, sf.getMaxMemstoreTS());
+        cacheMobBlocks, true, false, null, readPt);
       if (!sfScanners.isEmpty()) {
         scanner = sfScanners.get(0);
         if (scanner.seek(search)) {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
index cd08a98..7d8c9a5 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobFileCache.java
@@ -196,7 +196,9 @@ public class MobFileCache {
    */
   public MobFile openFile(FileSystem fs, Path path, MobCacheConfig cacheConf) throws IOException {
     if (!isCacheEnabled) {
-      return MobFile.create(fs, path, conf, cacheConf);
+      MobFile mobFile = MobFile.create(fs, path, conf, cacheConf);
+      mobFile.open();
+      return mobFile;
     } else {
       String fileName = path.getName();
       CachedMobFile cached = map.get(fileName);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
index 71464b8..51d6c10 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
@@ -554,7 +554,7 @@ public class MobUtils {
     HColumnDescriptor family, MobFileName mobFileName, Path basePath, long maxKeyCount,
     Compression.Algorithm compression, CacheConfig cacheConfig) throws IOException {
     HFileContext hFileContext = new HFileContextBuilder().withCompression(compression)
-      .withIncludesMvcc(false).withIncludesTags(true).withChecksumType(HFile.DEFAULT_CHECKSUM_TYPE)
+      .withIncludesMvcc(true).withIncludesTags(true).withChecksumType(HFile.DEFAULT_CHECKSUM_TYPE)
       .withBytesPerCheckSum(HFile.DEFAULT_BYTES_PER_CHECKSUM).withBlockSize(family.getBlocksize())
       .withHBaseCheckSum(true).withDataBlockEncoding(family.getDataBlockEncoding()).build();
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepReducer.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepReducer.java
index 73ca1a2..f872b3b 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepReducer.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/mapreduce/SweepReducer.java
@@ -342,6 +342,7 @@ public class SweepReducer extends Reducer<Text, KeyValue, Writable, Writable> {
         MobFile file = MobFile.create(fs,
             new Path(familyDir, mobFileName.getFileName()), conf, cacheConfig);
         StoreFileScanner scanner = null;
+        file.open();
         try {
           scanner = file.getScanner();
           scanner.seek(KeyValueUtil.createFirstOnRow(HConstants.EMPTY_BYTE_ARRAY));
@@ -359,6 +360,7 @@ public class SweepReducer extends Reducer<Text, KeyValue, Writable, Writable> {
           if (scanner != null) {
             scanner.close();
           }
+          file.close();
         }
         toBeDeleted.add(mobFileStat.getFileStatus().getPath());
       }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
index bd20852..b0d25a0 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HMobStore.java
@@ -246,7 +246,7 @@ public class HMobStore extends HStore {
       Compression.Algorithm compression) throws IOException {
     final CacheConfig writerCacheConf = mobCacheConfig;
     HFileContext hFileContext = new HFileContextBuilder().withCompression(compression)
-        .withIncludesMvcc(false).withIncludesTags(true)
+        .withIncludesMvcc(true).withIncludesTags(true)
         .withChecksumType(HFile.DEFAULT_CHECKSUM_TYPE)
         .withBytesPerCheckSum(HFile.DEFAULT_BYTES_PER_CHECKSUM)
         .withBlockSize(getFamily().getBlocksize())
@@ -304,13 +304,25 @@ public class HMobStore extends HStore {
   }
 
   /**
-   * Reads the cell from the mob file.
+   * Reads the cell from the mob file, and the read point does not count.
    * @param reference The cell found in the HBase, its value is a path to a mob file.
    * @param cacheBlocks Whether the scanner should cache blocks.
    * @return The cell found in the mob file.
    * @throws IOException
    */
   public Cell resolve(Cell reference, boolean cacheBlocks) throws IOException {
+    return resolve(reference, cacheBlocks, -1);
+  }
+
+  /**
+   * Reads the cell from the mob file.
+   * @param reference The cell found in the HBase, its value is a path to a mob file.
+   * @param cacheBlocks Whether the scanner should cache blocks.
+   * @param readPt the read point.
+   * @return The cell found in the mob file.
+   * @throws IOException
+   */
+  public Cell resolve(Cell reference, boolean cacheBlocks, long readPt) throws IOException {
     Cell result = null;
     if (MobUtils.hasValidMobRefCellValue(reference)) {
       String fileName = MobUtils.getMobFileName(reference);
@@ -335,7 +347,7 @@ public class HMobStore extends HStore {
             keyLock.releaseLockEntry(lockEntry);
           }
         }
-        result = readCell(locations, fileName, reference, cacheBlocks);
+        result = readCell(locations, fileName, reference, cacheBlocks, readPt);
       }
     }
     if (result == null) {
@@ -362,18 +374,20 @@ public class HMobStore extends HStore {
    * @param fileName The file to be read.
    * @param search The cell to be searched.
    * @param cacheMobBlocks Whether the scanner should cache blocks.
+   * @param readPt the read point.
    * @return The found cell. Null if there's no such a cell.
    * @throws IOException
    */
-  private Cell readCell(List<Path> locations, String fileName, Cell search, boolean cacheMobBlocks)
-      throws IOException {
+  private Cell readCell(List<Path> locations, String fileName, Cell search, boolean cacheMobBlocks,
+    long readPt) throws IOException {
     FileSystem fs = getFileSystem();
     for (Path location : locations) {
       MobFile file = null;
       Path path = new Path(location, fileName);
       try {
         file = mobCacheConfig.getMobFileCache().openFile(fs, path, mobCacheConfig);
-        return file.readCell(search, cacheMobBlocks);
+        return readPt != -1 ? file.readCell(search, cacheMobBlocks, readPt) : file.readCell(search,
+          cacheMobBlocks);
       } catch (IOException e) {
         mobCacheConfig.getMobFileCache().evictFile(fileName);
         if ((e instanceof FileNotFoundException) ||
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
index f7f0acd..c056461 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MobStoreScanner.java
@@ -66,7 +66,7 @@ public class MobStoreScanner extends StoreScanner {
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks);
+          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks, readPt);
           mobKVCount++;
           mobKVSize += mobCell.getValueLength();
           outResult.set(i, mobCell);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
index 4c46218..5d85175 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ReversedMobStoreScanner.java
@@ -66,7 +66,7 @@ public class ReversedMobStoreScanner extends ReversedStoreScanner {
       for (int i = 0; i < outResult.size(); i++) {
         Cell cell = outResult.get(i);
         if (MobUtils.isMobReferenceCell(cell)) {
-          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks);
+          Cell mobCell = mobStore.resolve(cell, cacheMobBlocks, readPt);
           mobKVCount++;
           mobKVSize += mobCell.getValueLength();
           outResult.set(i, mobCell);
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
index cf72529..33a659e 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
@@ -123,7 +123,7 @@ public class StoreScanner extends NonReversedNonLazyKeyValueScanner
   private boolean scanUsePread = false;
   protected ReentrantLock lock = new ReentrantLock();
   
-  private final long readPt;
+  protected final long readPt;
 
   // used by the injection framework to test race between StoreScanner construction and compaction
   enum StoreScannerCompactionRace {
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
index 8835dac..b5b10cc 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestMobStoreScanner.java
@@ -31,11 +31,11 @@ import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
-import org.apache.hadoop.hbase.client.*;
-import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.TableName;
+import org.apache.hadoop.hbase.client.*;
 import org.apache.hadoop.hbase.mob.MobConstants;
 import org.apache.hadoop.hbase.mob.MobUtils;
+import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.util.Bytes;
 import org.apache.hadoop.hbase.util.FSUtils;
 import org.apache.hadoop.hbase.util.HFileArchiveUtil;
@@ -50,6 +50,7 @@ public class TestMobStoreScanner {
 
   private final static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();
   private final static byte [] row1 = Bytes.toBytes("row1");
+  private final static byte [] row2 = Bytes.toBytes("row2");
   private final static byte [] family = Bytes.toBytes("family");
   private final static byte [] qf1 = Bytes.toBytes("qualifier1");
   private final static byte [] qf2 = Bytes.toBytes("qualifier2");
@@ -76,8 +77,8 @@ public class TestMobStoreScanner {
     TEST_UTIL.shutdownMiniCluster();
   }
 
-  public void setUp(long threshold, String TN) throws Exception {
-    desc = new HTableDescriptor(TableName.valueOf(TN));
+  public void setUp(long threshold, TableName tn) throws Exception {
+    desc = new HTableDescriptor(tn);
     hcd = new HColumnDescriptor(family);
     hcd.setMobEnabled(true);
     hcd.setMobThreshold(threshold);
@@ -85,7 +86,7 @@ public class TestMobStoreScanner {
     desc.addFamily(hcd);
     admin = new HBaseAdmin(TEST_UTIL.getConfiguration());
     admin.createTable(desc);
-    table = new HTable(TEST_UTIL.getConfiguration(), TN);
+    table = new HTable(TEST_UTIL.getConfiguration(), tn);
   }
 
   /**
@@ -135,8 +136,7 @@ public class TestMobStoreScanner {
 
   @Test(timeout=60000)
   public void testGetMassive() throws Exception {
-    String TN = "testGetMassive";
-    setUp(defaultThreshold, TN);
+    setUp(defaultThreshold, TableName.valueOf("testGetMassive"));
 
     // Put some data 5 10, 15, 20  mb ok  (this would be right below protobuf default max size of 64MB.
     // 25, 30, 40 fail.  these is above protobuf max size of 64MB
@@ -153,9 +153,46 @@ public class TestMobStoreScanner {
     // should not have blown up.
   }
 
+  @Test
+  public void testReadPt() throws Exception {
+    TableName tn = TableName.valueOf("testReadPt");
+    setUp(0L, tn);
+    long ts = System.currentTimeMillis();
+    byte[] value1 = Bytes.toBytes("value1");
+    Put put1 = new Put(row1);
+    put1.addColumn(family, qf1, ts, value1);
+    table.put(put1);
+    Put put2 = new Put(row2);
+    byte[] value2 = Bytes.toBytes("value2");
+    put2.addColumn(family, qf1, ts, value2);
+    table.put(put2);
+
+    Scan scan = new Scan();
+    scan.setCaching(1);
+    ResultScanner rs = table.getScanner(scan);
+
+    Put put3 = new Put(row1);
+    byte[] value3 = Bytes.toBytes("value3");
+    put3.addColumn(family, qf1, ts, value3);
+    table.put(put3);
+    Put put4 = new Put(row2);
+    byte[] value4 = Bytes.toBytes("value4");
+    put4.addColumn(family, qf1, ts, value4);
+    table.put(put4);
+    Result result = rs.next();
+    Cell cell = result.getColumnLatestCell(family, qf1);
+    Assert.assertEquals("value1", Bytes.toString(cell.getValue()));
+
+    admin.flush(tn);
+    result = rs.next();
+    cell = result.getColumnLatestCell(family, qf1);
+    Assert.assertEquals("value2", Bytes.toString(cell.getValue()));
+  }
+
+
   public void testGetFromFiles(boolean reversed) throws Exception {
-    String TN = "testGetFromFiles" + reversed;
-    setUp(defaultThreshold, TN);
+    TableName tn = TableName.valueOf("testGetFromFiles" + reversed);
+    setUp(defaultThreshold, tn);
     long ts1 = System.currentTimeMillis();
     long ts2 = ts1 + 1;
     long ts3 = ts1 + 2;
@@ -168,7 +205,7 @@ public class TestMobStoreScanner {
     table.put(put1);
 
     table.flushCommits();
-    admin.flush(TN);
+    admin.flush(tn);
 
     Scan scan = new Scan();
     setScan(scan, reversed, false);
@@ -188,9 +225,8 @@ public class TestMobStoreScanner {
     Assert.assertEquals(3, count);
   }
 
-  public void testGetFromMemStore(boolean reversed) throws Exception {
-    String TN = "testGetFromMemStore" + reversed;
-    setUp(defaultThreshold, TN);
+  private void testGetFromMemStore(boolean reversed) throws Exception {
+    setUp(defaultThreshold, TableName.valueOf("testGetFromMemStore" + reversed));
     long ts1 = System.currentTimeMillis();
     long ts2 = ts1 + 1;
     long ts3 = ts1 + 2;
@@ -221,8 +257,8 @@ public class TestMobStoreScanner {
   }
 
   public void testGetReferences(boolean reversed) throws Exception {
-    String TN = "testGetReferences" + reversed;
-    setUp(defaultThreshold, TN);
+    TableName tn = TableName.valueOf("testGetReferences" + reversed);
+    setUp(defaultThreshold, tn);
     long ts1 = System.currentTimeMillis();
     long ts2 = ts1 + 1;
     long ts3 = ts1 + 2;
@@ -235,7 +271,7 @@ public class TestMobStoreScanner {
     table.put(put1);
 
     table.flushCommits();
-    admin.flush(TN);
+    admin.flush(tn);
 
     Scan scan = new Scan();
     setScan(scan, reversed, true);
@@ -246,7 +282,7 @@ public class TestMobStoreScanner {
       List<Cell> cells = res.listCells();
       for(Cell cell : cells) {
         // Verify the value
-        assertIsMobReference(cell, row1, family, value, TN);
+        assertIsMobReference(cell, row1, family, value, tn);
         count++;
       }
     }
@@ -254,9 +290,9 @@ public class TestMobStoreScanner {
     Assert.assertEquals(3, count);
   }
 
-  public void testMobThreshold(boolean reversed) throws Exception {
-    String TN = "testMobThreshold" + reversed;
-    setUp(defaultThreshold, TN);
+  private void testMobThreshold(boolean reversed) throws Exception {
+    TableName tn = TableName.valueOf("testMobThreshold" + reversed);
+    setUp(defaultThreshold, tn);
     byte [] valueLess = generateMobValue((int)defaultThreshold-1);
     byte [] valueEqual = generateMobValue((int)defaultThreshold);
     byte [] valueGreater = generateMobValue((int)defaultThreshold+1);
@@ -271,7 +307,7 @@ public class TestMobStoreScanner {
     table.put(put1);
 
     table.flushCommits();
-    admin.flush(TN);
+    admin.flush(tn);
 
     Scan scan = new Scan();
     setScan(scan, reversed, true);
@@ -301,13 +337,13 @@ public class TestMobStoreScanner {
     Assert.assertEquals(3, count);
     assertNotMobReference(cellLess, row1, family, valueLess);
     assertNotMobReference(cellEqual, row1, family, valueEqual);
-    assertIsMobReference(cellGreater, row1, family, valueGreater, TN);
+    assertIsMobReference(cellGreater, row1, family, valueGreater, tn);
     results.close();
   }
 
-  public void testGetFromArchive(boolean reversed) throws Exception {
-    String TN = "testGetFromArchive" + reversed;
-    setUp(defaultThreshold, TN);
+  private void testGetFromArchive(boolean reversed) throws Exception {
+    TableName tn = TableName.valueOf("testGetFromArchive" + reversed);
+    setUp(defaultThreshold, tn);
     long ts1 = System.currentTimeMillis();
     long ts2 = ts1 + 1;
     long ts3 = ts1 + 2;
@@ -320,19 +356,19 @@ public class TestMobStoreScanner {
     table.put(put1);
 
     table.flushCommits();
-    admin.flush(TN);
+    admin.flush(tn);
 
     // Get the files in the mob path
     Path mobFamilyPath;
-    mobFamilyPath = new Path(MobUtils.getMobRegionPath(TEST_UTIL.getConfiguration(),
-        TableName.valueOf(TN)), hcd.getNameAsString());
+    mobFamilyPath = new Path(MobUtils.getMobRegionPath(TEST_UTIL.getConfiguration(), tn),
+      hcd.getNameAsString());
     FileSystem fs = FileSystem.get(TEST_UTIL.getConfiguration());
     FileStatus[] files = fs.listStatus(mobFamilyPath);
 
     // Get the archive path
     Path rootDir = FSUtils.getRootDir(TEST_UTIL.getConfiguration());
-    Path tableDir = FSUtils.getTableDir(rootDir, TableName.valueOf(TN));
-    HRegionInfo regionInfo = MobUtils.getMobRegionInfo(TableName.valueOf(TN));
+    Path tableDir = FSUtils.getTableDir(rootDir, tn);
+    HRegionInfo regionInfo = MobUtils.getMobRegionInfo(tn);
     Path storeArchiveDir = HFileArchiveUtil.getStoreArchivePath(TEST_UTIL.getConfiguration(),
         regionInfo, tableDir, family);
 
@@ -388,7 +424,7 @@ public class TestMobStoreScanner {
    * Assert the value is store in mob.
    */
   private static void assertIsMobReference(Cell cell, byte[] row, byte[] family,
-      byte[] value, String TN) throws IOException {
+      byte[] value, TableName tn) throws IOException {
     Assert.assertEquals(Bytes.toString(row),
         Bytes.toString(CellUtil.cloneRow(cell)));
     Assert.assertEquals(Bytes.toString(family),
@@ -402,7 +438,7 @@ public class TestMobStoreScanner {
     Assert.assertEquals(value.length, valLen);
     Path mobFamilyPath;
     mobFamilyPath = new Path(MobUtils.getMobRegionPath(TEST_UTIL.getConfiguration(),
-        TableName.valueOf(TN)), hcd.getNameAsString());
+        tn), hcd.getNameAsString());
     Path targetPath = new Path(mobFamilyPath, fileName);
     FileSystem fs = FileSystem.get(TEST_UTIL.getConfiguration());
     Assert.assertTrue(fs.exists(targetPath));
-- 
1.7.9.5

