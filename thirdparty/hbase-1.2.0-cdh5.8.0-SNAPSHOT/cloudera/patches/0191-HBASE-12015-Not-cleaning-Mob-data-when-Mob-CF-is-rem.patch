From f26427f68362eae2362e217dd7f0fa98b7e698fc Mon Sep 17 00:00:00 2001
From: anoopsjohn <anoopsamjohn@gmail.com>
Date: Mon, 13 Jul 2015 14:36:44 +0530
Subject: [PATCH 191/217] HBASE-12015 Not cleaning Mob data when Mob CF is
 removed from table.(Pankaj Kumar)

Reason: Bug
Author: Pankaj Kumar
Ref: CDH-33507

Change-Id: If465b05864407713272d4addc69ef00636dda341
---
 .../hadoop/hbase/master/MasterFileSystem.java      |   20 +++++++-
 .../master/procedure/AddColumnFamilyProcedure.java |    2 +-
 .../procedure/DeleteColumnFamilyProcedure.java     |    5 +-
 .../master/procedure/MasterDDLOperationHelper.java |    5 +-
 .../master/procedure/ModifyTableProcedure.java     |    3 +-
 .../java/org/apache/hadoop/hbase/mob/MobUtils.java |   24 +++++++++
 .../apache/hadoop/hbase/util/HFileArchiveUtil.java |    4 +-
 .../hbase/regionserver/TestDeleteMobTable.java     |   51 ++++++++++++++++++++
 8 files changed, 105 insertions(+), 9 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
index dc43d8c..30a6bc4 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterFileSystem.java
@@ -49,6 +49,8 @@ import org.apache.hadoop.hbase.ServerName;
 import org.apache.hadoop.hbase.backup.HFileArchiver;
 import org.apache.hadoop.hbase.exceptions.DeserializationException;
 import org.apache.hadoop.hbase.fs.HFileSystem;
+import org.apache.hadoop.hbase.mob.MobConstants;
+import org.apache.hadoop.hbase.mob.MobUtils;
 import org.apache.hadoop.hbase.protobuf.generated.ZooKeeperProtos.SplitLogTask.RecoveryMode;
 import org.apache.hadoop.hbase.regionserver.HRegion;
 import org.apache.hadoop.hbase.wal.DefaultWALProvider;
@@ -596,7 +598,7 @@ public class MasterFileSystem {
     //      @see HRegion.checkRegioninfoOnFilesystem()
   }
 
-  public void deleteFamilyFromFS(HRegionInfo region, byte[] familyName)
+  public void deleteFamilyFromFS(HRegionInfo region, byte[] familyName, boolean hasMob)
       throws IOException {
     // archive family store files
     Path tableDir = FSUtils.getTableDir(rootdir, region.getTable());
@@ -613,6 +615,22 @@ public class MasterFileSystem {
             + ")");
       }
     }
+    // archive and delete mob files
+    if (hasMob) {
+      Path mobTableDir =
+          FSUtils.getTableDir(new Path(getRootDir(), MobConstants.MOB_DIR_NAME), region.getTable());
+      HRegionInfo mobRegionInfo = MobUtils.getMobRegionInfo(region.getTable());
+      Path mobFamilyDir =
+          new Path(mobTableDir,
+              new Path(mobRegionInfo.getEncodedName(), Bytes.toString(familyName)));
+      // archive mob family store files
+      MobUtils.archiveMobStoreFiles(conf, fs, mobRegionInfo, mobFamilyDir, familyName);
+      if (!fs.delete(mobFamilyDir, true)) {
+        throw new IOException("Could not delete mob store files for family "
+            + Bytes.toString(familyName) + " from FileSystem region "
+            + mobRegionInfo.getRegionNameAsString() + "(" + mobRegionInfo.getEncodedName() + ")");
+      }
+    }
   }
 
   public void stop() {
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/AddColumnFamilyProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/AddColumnFamilyProcedure.java
index 9905767..f1fbe1d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/AddColumnFamilyProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/AddColumnFamilyProcedure.java
@@ -310,7 +310,7 @@ public class AddColumnFamilyProcedure
       // Remove the column family from file system and update the table descriptor to
       // the before-add-column-family-state
       MasterDDLOperationHelper.deleteColumnFamilyFromFileSystem(env, tableName,
-        getRegionInfoList(env), cfDescriptor.getName());
+        getRegionInfoList(env), cfDescriptor.getName(), cfDescriptor.isMobEnabled());
 
       env.getMasterServices().getTableDescriptors().add(unmodifiedHTableDescriptor);
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteColumnFamilyProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteColumnFamilyProcedure.java
index 54d8fe5..a8d938d 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteColumnFamilyProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/DeleteColumnFamilyProcedure.java
@@ -56,6 +56,7 @@ public class DeleteColumnFamilyProcedure
   private HTableDescriptor unmodifiedHTableDescriptor;
   private TableName tableName;
   private byte [] familyName;
+  private boolean hasMob;
   private UserGroupInformation user;
 
   private List<HRegionInfo> regionInfoList;
@@ -286,6 +287,8 @@ public class DeleteColumnFamilyProcedure
       throw new InvalidFamilyOperationException("Family '" + getColumnFamilyName()
         + "' is the only column family in the table, so it cannot be deleted");
     }
+    // whether mob family
+    hasMob = unmodifiedHTableDescriptor.getFamily(familyName).isMobEnabled();
   }
 
   /**
@@ -337,7 +340,7 @@ public class DeleteColumnFamilyProcedure
    **/
   private void deleteFromFs(final MasterProcedureEnv env) throws IOException {
     MasterDDLOperationHelper.deleteColumnFamilyFromFileSystem(env, tableName,
-      getRegionInfoList(env), familyName);
+      getRegionInfoList(env), familyName, hasMob);
   }
 
   /**
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterDDLOperationHelper.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterDDLOperationHelper.java
index 2e8499f..752f613 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterDDLOperationHelper.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/MasterDDLOperationHelper.java
@@ -91,7 +91,8 @@ public final class MasterDDLOperationHelper {
       final MasterProcedureEnv env,
       final TableName tableName,
       List<HRegionInfo> regionInfoList,
-      final byte[] familyName) throws IOException {
+      final byte[] familyName,
+      boolean hasMob) throws IOException {
     final MasterFileSystem mfs = env.getMasterServices().getMasterFileSystem();
     if (LOG.isDebugEnabled()) {
       LOG.debug("Removing family=" + Bytes.toString(familyName) + " from table=" + tableName);
@@ -101,7 +102,7 @@ public final class MasterDDLOperationHelper {
     }
     for (HRegionInfo hri : regionInfoList) {
       // Delete the family directory in FS for all the regions one by one
-      mfs.deleteFamilyFromFS(hri, familyName);
+      mfs.deleteFamilyFromFS(hri, familyName, hasMob);
     }
   }
 
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
index ddbc9ef..f5158e7 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ModifyTableProcedure.java
@@ -367,7 +367,8 @@ public class ModifyTableProcedure
           env,
           getTableName(),
           getRegionInfoList(env),
-          familyName);
+          familyName,
+          oldHTableDescriptor.getFamily(familyName).isMobEnabled());
       }
     }
   }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
index e1f3dfa..cb813ac 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/mob/MobUtils.java
@@ -42,6 +42,7 @@ import org.apache.hadoop.fs.FileStatus;
 import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.Cell;
+import org.apache.hadoop.hbase.HBaseConfiguration;
 import org.apache.hadoop.hbase.HColumnDescriptor;
 import org.apache.hadoop.hbase.HConstants;
 import org.apache.hadoop.hbase.HRegionInfo;
@@ -761,4 +762,27 @@ public class MobUtils {
       return false;
     }
   }
+  
+  /**
+   * Archive mob store files
+   * @param conf The current configuration.
+   * @param fs The current file system.
+   * @param mobRegionInfo The mob family region info.
+   * @param mobFamilyDir The mob family directory.
+   * @param family The name of the column family.
+   * @throws IOException
+   */
+  public static void archiveMobStoreFiles(Configuration conf, FileSystem fs,
+      HRegionInfo mobRegionInfo, Path mobFamilyDir, byte[] family) throws IOException {
+    // disable the block cache.
+    Configuration copyOfConf = HBaseConfiguration.create(conf);
+    copyOfConf.setFloat(HConstants.HFILE_BLOCK_CACHE_SIZE_KEY, 0f);
+    CacheConfig cacheConfig = new CacheConfig(copyOfConf);
+    FileStatus[] fileStatus = FSUtils.listStatus(fs, mobFamilyDir);
+    List<StoreFile> storeFileList = new ArrayList<StoreFile>();
+    for (FileStatus file : fileStatus) {
+      storeFileList.add(new StoreFile(fs, file.getPath(), conf, cacheConfig, BloomType.NONE));
+    }
+    HFileArchiver.archiveStoreFiles(conf, fs, mobRegionInfo, mobFamilyDir, family, storeFileList);
+  }
 }
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HFileArchiveUtil.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HFileArchiveUtil.java
index 937e9b2..a235696 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HFileArchiveUtil.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/util/HFileArchiveUtil.java
@@ -64,10 +64,8 @@ public class HFileArchiveUtil {
                                          HRegionInfo region,
                                          Path tabledir,
       byte[] family) throws IOException {
-    TableName tableName =
-        FSUtils.getTableName(tabledir);
     Path rootDir = FSUtils.getRootDir(conf);
-    Path tableArchiveDir = getTableArchivePath(rootDir, tableName);
+    Path tableArchiveDir = getTableArchivePath(rootDir, region.getTable());
     return HStore.getStoreHomedir(tableArchiveDir, region, family);
   }
 
diff --git a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java
index d180f75..c3c1561 100644
--- a/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java
+++ b/hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestDeleteMobTable.java
@@ -24,6 +24,7 @@ import org.apache.hadoop.fs.FileSystem;
 import org.apache.hadoop.fs.Path;
 import org.apache.hadoop.hbase.HBaseTestingUtility;
 import org.apache.hadoop.hbase.HColumnDescriptor;
+import org.apache.hadoop.hbase.HRegionInfo;
 import org.apache.hadoop.hbase.HTableDescriptor;
 import org.apache.hadoop.hbase.testclassification.MediumTests;
 import org.apache.hadoop.hbase.TableName;
@@ -169,6 +170,48 @@ public class TestDeleteMobTable {
       }
     }
   }
+  
+  @Test
+  public void testMobFamilyDelete() throws Exception {
+    byte[] tableName = Bytes.toBytes("testMobFamilyDelete");
+    TableName tn = TableName.valueOf(tableName);
+    HTableDescriptor htd = new HTableDescriptor(tn);
+    HColumnDescriptor hcd = new HColumnDescriptor(FAMILY);
+    hcd.setMobEnabled(true);
+    hcd.setMobThreshold(0);
+    htd.addFamily(hcd);
+    htd.addFamily(new HColumnDescriptor(Bytes.toBytes("family2")));
+    HBaseAdmin admin = null;
+    HTable table = null;
+    try {
+      admin = TEST_UTIL.getHBaseAdmin();
+      admin.createTable(htd);
+      table = new HTable(TEST_UTIL.getConfiguration(), tableName);
+      byte[] value = generateMobValue(10);
+      byte[] row = Bytes.toBytes("row");
+      Put put = new Put(row);
+      put.addColumn(FAMILY, QF, EnvironmentEdgeManager.currentTime(), value);
+      table.put(put);
+      admin.flush(tn);
+      // the mob file exists
+      Assert.assertEquals(1, countMobFiles(tn, hcd.getNameAsString()));
+      Assert.assertEquals(0, countArchiveMobFiles(tn, hcd.getNameAsString()));
+      String fileName = assertHasOneMobRow(table, tn, hcd.getNameAsString());
+      Assert.assertFalse(mobArchiveExist(tn, hcd.getNameAsString(), fileName));
+      Assert.assertTrue(mobTableDirExist(tn));
+      admin.deleteColumn(tn, FAMILY);
+      Assert.assertEquals(0, countMobFiles(tn, hcd.getNameAsString()));
+      Assert.assertEquals(1, countArchiveMobFiles(tn, hcd.getNameAsString()));
+      Assert.assertTrue(mobArchiveExist(tn, hcd.getNameAsString(), fileName));
+      Assert.assertFalse(mobColumnFamilyDirExist(tn));
+    } finally {
+      table.close();
+      if (admin != null) {
+        admin.close();
+      }
+      TEST_UTIL.deleteTable(tableName);
+    }
+  }
 
   private int countMobFiles(TableName tn, String familyName) throws IOException {
     FileSystem fs = TEST_UTIL.getTestFileSystem();
@@ -197,6 +240,14 @@ public class TestDeleteMobTable {
     Path tableDir = FSUtils.getTableDir(MobUtils.getMobHome(TEST_UTIL.getConfiguration()), tn);
     return fs.exists(tableDir);
   }
+  
+  private boolean mobColumnFamilyDirExist(TableName tn) throws IOException {
+    FileSystem fs = TEST_UTIL.getTestFileSystem();
+    Path tableDir = FSUtils.getTableDir(MobUtils.getMobHome(TEST_UTIL.getConfiguration()), tn);
+    HRegionInfo mobRegionInfo = MobUtils.getMobRegionInfo(tn);
+    Path mobFamilyDir = new Path(tableDir, new Path(mobRegionInfo.getEncodedName(), Bytes.toString(FAMILY)));
+    return fs.exists(mobFamilyDir);
+  }
 
   private boolean mobArchiveExist(TableName tn, String familyName, String fileName)
       throws IOException {
-- 
1.7.9.5

