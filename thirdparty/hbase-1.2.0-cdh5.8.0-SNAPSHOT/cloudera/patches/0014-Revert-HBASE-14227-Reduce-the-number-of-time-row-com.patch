From 44e82645838c3c5529c5c98a25dcaa60cf0e1fe4 Mon Sep 17 00:00:00 2001
From: ramkrishna <ramkrishna.s.vasudevan@gmail.com>
Date: Fri, 8 Jan 2016 14:04:38 +0530
Subject: [PATCH 014/217] Revert "HBASE-14227 Reduce the number of time row
 comparison is done in a Scan"

This reverts commit abcab52695e7737d78fe5285e22e2fe5caf78421.
---
 .../hbase/regionserver/ScanQueryMatcher.java       |   32 +++++++++-----------
 .../hadoop/hbase/regionserver/StoreScanner.java    |   20 ++----------
 2 files changed, 17 insertions(+), 35 deletions(-)

diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java
index c832255..9c91017 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/ScanQueryMatcher.java
@@ -283,27 +283,23 @@ public class ScanQueryMatcher {
       if (filter != null && filter.filterAllRemaining()) {
       return MatchCode.DONE_SCAN;
     }
-    if (row != null) {
-      int ret = this.rowComparator.compareRows(row, this.rowOffset, this.rowLength,
+    int ret = this.rowComparator.compareRows(row, this.rowOffset, this.rowLength,
         cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());
-      if (!this.isReversed) {
-        if (ret <= -1) {
-          return MatchCode.DONE;
-        } else if (ret >= 1) {
-          // could optimize this, if necessary?
-          // Could also be called SEEK_TO_CURRENT_ROW, but this
-          // should be rare/never happens.
-          return MatchCode.SEEK_NEXT_ROW;
-        }
-      } else {
-        if (ret <= -1) {
-          return MatchCode.SEEK_NEXT_ROW;
-        } else if (ret >= 1) {
-          return MatchCode.DONE;
-        }
+    if (!this.isReversed) {
+      if (ret <= -1) {
+        return MatchCode.DONE;
+      } else if (ret >= 1) {
+        // could optimize this, if necessary?
+        // Could also be called SEEK_TO_CURRENT_ROW, but this
+        // should be rare/never happens.
+        return MatchCode.SEEK_NEXT_ROW;
       }
     } else {
-      return MatchCode.DONE;
+      if (ret <= -1) {
+        return MatchCode.SEEK_NEXT_ROW;
+      } else if (ret >= 1) {
+        return MatchCode.DONE;
+      }
     }
 
     // optimize case.
diff --git a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
index f1735eb..d5c65a5 100644
--- a/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
+++ b/hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java
@@ -491,7 +491,8 @@ public class StoreScanner extends NonReversedNonLazyKeyValueScanner
     // If no limits exists in the scope LimitScope.Between_Cells then we are sure we are changing
     // rows. Else it is possible we are still traversing the same row so we must perform the row
     // comparison.
-    if (!scannerContext.hasAnyLimit(LimitScope.BETWEEN_CELLS) || matcher.row == null) {
+    if (!scannerContext.hasAnyLimit(LimitScope.BETWEEN_CELLS) || matcher.row == null ||
+        !Bytes.equals(row, offset, length, matcher.row, matcher.rowOffset, matcher.rowLength)) {
       this.countPerRow = 0;
       matcher.setRow(row, offset, length);
     }
@@ -539,10 +540,6 @@ public class StoreScanner extends NonReversedNonLazyKeyValueScanner
             if (!matcher.moreRowsMayExistAfter(cell)) {
               return scannerContext.setScannerState(NextState.NO_MORE_VALUES).hasMoreValues();
             }
-            // Setting the matcher.row = null, will mean that after the subsequent seekToNextRow()
-            // the heap.peek() will any way be in the next row. So the SQM.match(cell) need do
-            // another compareRow to say the current row is DONE
-            matcher.row = null;
             seekToNextRow(cell);
             break LOOP;
           }
@@ -570,10 +567,6 @@ public class StoreScanner extends NonReversedNonLazyKeyValueScanner
             if (!matcher.moreRowsMayExistAfter(cell)) {
               return scannerContext.setScannerState(NextState.NO_MORE_VALUES).hasMoreValues();
             }
-            // Setting the matcher.row = null, will mean that after the subsequent seekToNextRow()
-            // the heap.peek() will any way be in the next row. So the SQM.match(cell) need do
-            // another compareRow to say the current row is DONE
-            matcher.row = null;
             seekToNextRow(cell);
           } else if (qcode == ScanQueryMatcher.MatchCode.INCLUDE_AND_SEEK_NEXT_COL) {
             seekAsDirection(matcher.getKeyForNextColumn(cell));
@@ -590,10 +583,6 @@ public class StoreScanner extends NonReversedNonLazyKeyValueScanner
           continue;
 
         case DONE:
-          // We are sure that this row is done and we are in the next row.
-          // So subsequent StoresScanner.next() call need not do another compare
-          // and set the matcher.row
-          matcher.row = null;
           return scannerContext.setScannerState(NextState.MORE_VALUES).hasMoreValues();
 
         case DONE_SCAN:
@@ -606,10 +595,7 @@ public class StoreScanner extends NonReversedNonLazyKeyValueScanner
           if (!matcher.moreRowsMayExistAfter(cell)) {
             return scannerContext.setScannerState(NextState.NO_MORE_VALUES).hasMoreValues();
           }
-          // Setting the matcher.row = null, will mean that after the subsequent seekToNextRow()
-          // the heap.peek() will any way be in the next row. So the SQM.match(cell) need do
-          // another compareRow to say the current row is DONE
-          matcher.row = null;
+
           seekToNextRow(cell);
           break;
 
-- 
1.7.9.5

